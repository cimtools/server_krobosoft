/* eslint-disable camelcase */
/* eslint-disable max-len */
// DO NOT EDIT
// This file is generated by the rostsd_gen script

declare module 'rclnodejs' {
  namespace action_msgs {
    namespace msg {
      export type GoalInfo = {
        goal_id: unique_identifier_msgs.msg.UUID,
        stamp: builtin_interfaces.msg.Time,
      };
      export type GoalInfo_WrapperType = {
        new(other?: GoalInfo): GoalInfo,
      }
      export type GoalStatus = {
        goal_info: action_msgs.msg.GoalInfo,
        status: number,
      };
      export type GoalStatus_WrapperType = {
        readonly STATUS_UNKNOWN: number,
        readonly STATUS_ACCEPTED: number,
        readonly STATUS_EXECUTING: number,
        readonly STATUS_CANCELING: number,
        readonly STATUS_SUCCEEDED: number,
        readonly STATUS_CANCELED: number,
        readonly STATUS_ABORTED: number,
        new(other?: GoalStatus): GoalStatus,
      }
      export type GoalStatusArray = {
        status_list: action_msgs.msg.GoalStatus[],
      };
      export type GoalStatusArray_WrapperType = {
        new(other?: GoalStatusArray): GoalStatusArray,
      }
    }
    namespace srv {
      export type CancelGoal_Request = {
        goal_info: action_msgs.msg.GoalInfo,
      };
      export type CancelGoal_Request_WrapperType = {
        new(other?: CancelGoal_Request): CancelGoal_Request,
      }
      export type CancelGoal_Response = {
        return_code: number,
        goals_canceling: action_msgs.msg.GoalInfo[],
      };
      export type CancelGoal_Response_WrapperType = {
        readonly ERROR_NONE: number,
        readonly ERROR_REJECTED: number,
        readonly ERROR_UNKNOWN_GOAL_ID: number,
        readonly ERROR_GOAL_TERMINATED: number,
        new(other?: CancelGoal_Response): CancelGoal_Response,
      }
    }
  }

  namespace actionlib_msgs {
    namespace msg {
      export type GoalID = {
        stamp: builtin_interfaces.msg.Time,
        id: string,
      };
      export type GoalID_WrapperType = {
        new(other?: GoalID): GoalID,
      }
      export type GoalStatus = {
        goal_id: actionlib_msgs.msg.GoalID,
        status: number,
        text: string,
      };
      export type GoalStatus_WrapperType = {
        readonly PENDING: number,
        readonly ACTIVE: number,
        readonly PREEMPTED: number,
        readonly SUCCEEDED: number,
        readonly ABORTED: number,
        readonly REJECTED: number,
        readonly PREEMPTING: number,
        readonly RECALLING: number,
        readonly RECALLED: number,
        readonly LOST: number,
        new(other?: GoalStatus): GoalStatus,
      }
      export type GoalStatusArray = {
        header: std_msgs.msg.Header,
        status_list: actionlib_msgs.msg.GoalStatus[],
      };
      export type GoalStatusArray_WrapperType = {
        new(other?: GoalStatusArray): GoalStatusArray,
      }
    }
  }

  namespace builtin_interfaces {
    namespace msg {
      export type Duration = {
        sec: number,
        nanosec: number,
      };
      export type Duration_WrapperType = {
        new(other?: Duration): Duration,
      }
      export type Time = {
        sec: number,
        nanosec: number,
      };
      export type Time_WrapperType = {
        new(other?: Time): Time,
      }
    }
  }

  namespace composition_interfaces {
    namespace srv {
      export type ListNodes_Request = {
      };
      export type ListNodes_Request_WrapperType = {
        new(other?: ListNodes_Request): ListNodes_Request,
      }
      export type ListNodes_Response = {
        full_node_names: string[],
        unique_ids: number[],
      };
      export type ListNodes_Response_WrapperType = {
        new(other?: ListNodes_Response): ListNodes_Response,
      }
      export type LoadNode_Request = {
        package_name: string,
        plugin_name: string,
        node_name: string,
        node_namespace: string,
        log_level: number,
        remap_rules: string[],
        parameters: rcl_interfaces.msg.Parameter[],
        extra_arguments: rcl_interfaces.msg.Parameter[],
      };
      export type LoadNode_Request_WrapperType = {
        new(other?: LoadNode_Request): LoadNode_Request,
      }
      export type LoadNode_Response = {
        success: boolean,
        error_message: string,
        full_node_name: string,
        unique_id: number,
      };
      export type LoadNode_Response_WrapperType = {
        new(other?: LoadNode_Response): LoadNode_Response,
      }
      export type UnloadNode_Request = {
        unique_id: number,
      };
      export type UnloadNode_Request_WrapperType = {
        new(other?: UnloadNode_Request): UnloadNode_Request,
      }
      export type UnloadNode_Response = {
        success: boolean,
        error_message: string,
      };
      export type UnloadNode_Response_WrapperType = {
        new(other?: UnloadNode_Response): UnloadNode_Response,
      }
    }
  }

  namespace diagnostic_msgs {
    namespace msg {
      export type DiagnosticArray = {
        header: std_msgs.msg.Header,
        status: diagnostic_msgs.msg.DiagnosticStatus[],
      };
      export type DiagnosticArray_WrapperType = {
        new(other?: DiagnosticArray): DiagnosticArray,
      }
      export type DiagnosticStatus = {
        level: number,
        name: string,
        message: string,
        hardware_id: string,
        values: diagnostic_msgs.msg.KeyValue[],
      };
      export type DiagnosticStatus_WrapperType = {
        readonly OK: number,
        readonly WARN: number,
        readonly ERROR: number,
        readonly STALE: number,
        new(other?: DiagnosticStatus): DiagnosticStatus,
      }
      export type KeyValue = {
        key: string,
        value: string,
      };
      export type KeyValue_WrapperType = {
        new(other?: KeyValue): KeyValue,
      }
    }
    namespace srv {
      export type AddDiagnostics_Request = {
        load_namespace: string,
      };
      export type AddDiagnostics_Request_WrapperType = {
        new(other?: AddDiagnostics_Request): AddDiagnostics_Request,
      }
      export type AddDiagnostics_Response = {
        success: boolean,
        message: string,
      };
      export type AddDiagnostics_Response_WrapperType = {
        new(other?: AddDiagnostics_Response): AddDiagnostics_Response,
      }
      export type SelfTest_Request = {
      };
      export type SelfTest_Request_WrapperType = {
        new(other?: SelfTest_Request): SelfTest_Request,
      }
      export type SelfTest_Response = {
        id: string,
        passed: number,
        status: diagnostic_msgs.msg.DiagnosticStatus[],
      };
      export type SelfTest_Response_WrapperType = {
        new(other?: SelfTest_Response): SelfTest_Response,
      }
    }
  }

  namespace example_interfaces {
    namespace srv {
      export type AddTwoInts_Request = {
        a: number,
        b: number,
      };
      export type AddTwoInts_Request_WrapperType = {
        new(other?: AddTwoInts_Request): AddTwoInts_Request,
      }
      export type AddTwoInts_Response = {
        sum: number,
      };
      export type AddTwoInts_Response_WrapperType = {
        new(other?: AddTwoInts_Response): AddTwoInts_Response,
      }
    }
  }

  namespace geometry_msgs {
    namespace msg {
      export type Accel = {
        linear: geometry_msgs.msg.Vector3,
        angular: geometry_msgs.msg.Vector3,
      };
      export type Accel_WrapperType = {
        new(other?: Accel): Accel,
      }
      export type AccelStamped = {
        header: std_msgs.msg.Header,
        accel: geometry_msgs.msg.Accel,
      };
      export type AccelStamped_WrapperType = {
        new(other?: AccelStamped): AccelStamped,
      }
      export type AccelWithCovariance = {
        accel: geometry_msgs.msg.Accel,
        covariance: number[],
      };
      export type AccelWithCovariance_WrapperType = {
        new(other?: AccelWithCovariance): AccelWithCovariance,
      }
      export type AccelWithCovarianceStamped = {
        header: std_msgs.msg.Header,
        accel: geometry_msgs.msg.AccelWithCovariance,
      };
      export type AccelWithCovarianceStamped_WrapperType = {
        new(other?: AccelWithCovarianceStamped): AccelWithCovarianceStamped,
      }
      export type Inertia = {
        m: number,
        com: geometry_msgs.msg.Vector3,
        ixx: number,
        ixy: number,
        ixz: number,
        iyy: number,
        iyz: number,
        izz: number,
      };
      export type Inertia_WrapperType = {
        new(other?: Inertia): Inertia,
      }
      export type InertiaStamped = {
        header: std_msgs.msg.Header,
        inertia: geometry_msgs.msg.Inertia,
      };
      export type InertiaStamped_WrapperType = {
        new(other?: InertiaStamped): InertiaStamped,
      }
      export type Point = {
        x: number,
        y: number,
        z: number,
      };
      export type Point_WrapperType = {
        new(other?: Point): Point,
      }
      export type Point32 = {
        x: number,
        y: number,
        z: number,
      };
      export type Point32_WrapperType = {
        new(other?: Point32): Point32,
      }
      export type PointStamped = {
        header: std_msgs.msg.Header,
        point: geometry_msgs.msg.Point,
      };
      export type PointStamped_WrapperType = {
        new(other?: PointStamped): PointStamped,
      }
      export type Polygon = {
        points: geometry_msgs.msg.Point32[],
      };
      export type Polygon_WrapperType = {
        new(other?: Polygon): Polygon,
      }
      export type PolygonStamped = {
        header: std_msgs.msg.Header,
        polygon: geometry_msgs.msg.Polygon,
      };
      export type PolygonStamped_WrapperType = {
        new(other?: PolygonStamped): PolygonStamped,
      }
      export type Pose = {
        position: geometry_msgs.msg.Point,
        orientation: geometry_msgs.msg.Quaternion,
      };
      export type Pose_WrapperType = {
        new(other?: Pose): Pose,
      }
      export type Pose2D = {
        x: number,
        y: number,
        theta: number,
      };
      export type Pose2D_WrapperType = {
        new(other?: Pose2D): Pose2D,
      }
      export type PoseArray = {
        header: std_msgs.msg.Header,
        poses: geometry_msgs.msg.Pose[],
      };
      export type PoseArray_WrapperType = {
        new(other?: PoseArray): PoseArray,
      }
      export type PoseStamped = {
        header: std_msgs.msg.Header,
        pose: geometry_msgs.msg.Pose,
      };
      export type PoseStamped_WrapperType = {
        new(other?: PoseStamped): PoseStamped,
      }
      export type PoseWithCovariance = {
        pose: geometry_msgs.msg.Pose,
        covariance: number[],
      };
      export type PoseWithCovariance_WrapperType = {
        new(other?: PoseWithCovariance): PoseWithCovariance,
      }
      export type PoseWithCovarianceStamped = {
        header: std_msgs.msg.Header,
        pose: geometry_msgs.msg.PoseWithCovariance,
      };
      export type PoseWithCovarianceStamped_WrapperType = {
        new(other?: PoseWithCovarianceStamped): PoseWithCovarianceStamped,
      }
      export type Quaternion = {
        x: number,
        y: number,
        z: number,
        w: number,
      };
      export type Quaternion_WrapperType = {
        new(other?: Quaternion): Quaternion,
      }
      export type QuaternionStamped = {
        header: std_msgs.msg.Header,
        quaternion: geometry_msgs.msg.Quaternion,
      };
      export type QuaternionStamped_WrapperType = {
        new(other?: QuaternionStamped): QuaternionStamped,
      }
      export type Transform = {
        translation: geometry_msgs.msg.Vector3,
        rotation: geometry_msgs.msg.Quaternion,
      };
      export type Transform_WrapperType = {
        new(other?: Transform): Transform,
      }
      export type TransformStamped = {
        header: std_msgs.msg.Header,
        child_frame_id: string,
        transform: geometry_msgs.msg.Transform,
      };
      export type TransformStamped_WrapperType = {
        new(other?: TransformStamped): TransformStamped,
      }
      export type Twist = {
        linear: geometry_msgs.msg.Vector3,
        angular: geometry_msgs.msg.Vector3,
      };
      export type Twist_WrapperType = {
        new(other?: Twist): Twist,
      }
      export type TwistStamped = {
        header: std_msgs.msg.Header,
        twist: geometry_msgs.msg.Twist,
      };
      export type TwistStamped_WrapperType = {
        new(other?: TwistStamped): TwistStamped,
      }
      export type TwistWithCovariance = {
        twist: geometry_msgs.msg.Twist,
        covariance: number[],
      };
      export type TwistWithCovariance_WrapperType = {
        new(other?: TwistWithCovariance): TwistWithCovariance,
      }
      export type TwistWithCovarianceStamped = {
        header: std_msgs.msg.Header,
        twist: geometry_msgs.msg.TwistWithCovariance,
      };
      export type TwistWithCovarianceStamped_WrapperType = {
        new(other?: TwistWithCovarianceStamped): TwistWithCovarianceStamped,
      }
      export type Vector3 = {
        x: number,
        y: number,
        z: number,
      };
      export type Vector3_WrapperType = {
        new(other?: Vector3): Vector3,
      }
      export type Vector3Stamped = {
        header: std_msgs.msg.Header,
        vector: geometry_msgs.msg.Vector3,
      };
      export type Vector3Stamped_WrapperType = {
        new(other?: Vector3Stamped): Vector3Stamped,
      }
      export type Wrench = {
        force: geometry_msgs.msg.Vector3,
        torque: geometry_msgs.msg.Vector3,
      };
      export type Wrench_WrapperType = {
        new(other?: Wrench): Wrench,
      }
      export type WrenchStamped = {
        header: std_msgs.msg.Header,
        wrench: geometry_msgs.msg.Wrench,
      };
      export type WrenchStamped_WrapperType = {
        new(other?: WrenchStamped): WrenchStamped,
      }
    }
  }

  namespace lifecycle_msgs {
    namespace msg {
      export type State = {
        id: number,
        label: string,
      };
      export type State_WrapperType = {
        readonly PRIMARY_STATE_UNKNOWN: number,
        readonly PRIMARY_STATE_UNCONFIGURED: number,
        readonly PRIMARY_STATE_INACTIVE: number,
        readonly PRIMARY_STATE_ACTIVE: number,
        readonly PRIMARY_STATE_FINALIZED: number,
        readonly TRANSITION_STATE_CONFIGURING: number,
        readonly TRANSITION_STATE_CLEANINGUP: number,
        readonly TRANSITION_STATE_SHUTTINGDOWN: number,
        readonly TRANSITION_STATE_ACTIVATING: number,
        readonly TRANSITION_STATE_DEACTIVATING: number,
        readonly TRANSITION_STATE_ERRORPROCESSING: number,
        new(other?: State): State,
      }
      export type Transition = {
        id: number,
        label: string,
      };
      export type Transition_WrapperType = {
        readonly TRANSITION_CREATE: number,
        readonly TRANSITION_CONFIGURE: number,
        readonly TRANSITION_CLEANUP: number,
        readonly TRANSITION_ACTIVATE: number,
        readonly TRANSITION_DEACTIVATE: number,
        readonly TRANSITION_UNCONFIGURED_SHUTDOWN: number,
        readonly TRANSITION_INACTIVE_SHUTDOWN: number,
        readonly TRANSITION_ACTIVE_SHUTDOWN: number,
        readonly TRANSITION_DESTROY: number,
        readonly TRANSITION_ON_CONFIGURE_SUCCESS: number,
        readonly TRANSITION_ON_CONFIGURE_FAILURE: number,
        readonly TRANSITION_ON_CONFIGURE_ERROR: number,
        readonly TRANSITION_ON_CLEANUP_SUCCESS: number,
        readonly TRANSITION_ON_CLEANUP_FAILURE: number,
        readonly TRANSITION_ON_CLEANUP_ERROR: number,
        readonly TRANSITION_ON_ACTIVATE_SUCCESS: number,
        readonly TRANSITION_ON_ACTIVATE_FAILURE: number,
        readonly TRANSITION_ON_ACTIVATE_ERROR: number,
        readonly TRANSITION_ON_DEACTIVATE_SUCCESS: number,
        readonly TRANSITION_ON_DEACTIVATE_FAILURE: number,
        readonly TRANSITION_ON_DEACTIVATE_ERROR: number,
        readonly TRANSITION_ON_SHUTDOWN_SUCCESS: number,
        readonly TRANSITION_ON_SHUTDOWN_FAILURE: number,
        readonly TRANSITION_ON_SHUTDOWN_ERROR: number,
        readonly TRANSITION_ON_ERROR_SUCCESS: number,
        readonly TRANSITION_ON_ERROR_FAILURE: number,
        readonly TRANSITION_ON_ERROR_ERROR: number,
        readonly TRANSITION_CALLBACK_SUCCESS: number,
        readonly TRANSITION_CALLBACK_FAILURE: number,
        readonly TRANSITION_CALLBACK_ERROR: number,
        new(other?: Transition): Transition,
      }
      export type TransitionDescription = {
        transition: lifecycle_msgs.msg.Transition,
        start_state: lifecycle_msgs.msg.State,
        goal_state: lifecycle_msgs.msg.State,
      };
      export type TransitionDescription_WrapperType = {
        new(other?: TransitionDescription): TransitionDescription,
      }
      export type TransitionEvent = {
        timestamp: number,
        transition: lifecycle_msgs.msg.Transition,
        start_state: lifecycle_msgs.msg.State,
        goal_state: lifecycle_msgs.msg.State,
      };
      export type TransitionEvent_WrapperType = {
        new(other?: TransitionEvent): TransitionEvent,
      }
    }
    namespace srv {
      export type ChangeState_Request = {
        transition: lifecycle_msgs.msg.Transition,
      };
      export type ChangeState_Request_WrapperType = {
        new(other?: ChangeState_Request): ChangeState_Request,
      }
      export type ChangeState_Response = {
        success: boolean,
      };
      export type ChangeState_Response_WrapperType = {
        new(other?: ChangeState_Response): ChangeState_Response,
      }
      export type GetAvailableStates_Request = {
      };
      export type GetAvailableStates_Request_WrapperType = {
        new(other?: GetAvailableStates_Request): GetAvailableStates_Request,
      }
      export type GetAvailableStates_Response = {
        available_states: lifecycle_msgs.msg.State[],
      };
      export type GetAvailableStates_Response_WrapperType = {
        new(other?: GetAvailableStates_Response): GetAvailableStates_Response,
      }
      export type GetAvailableTransitions_Request = {
      };
      export type GetAvailableTransitions_Request_WrapperType = {
        new(other?: GetAvailableTransitions_Request): GetAvailableTransitions_Request,
      }
      export type GetAvailableTransitions_Response = {
        available_transitions: lifecycle_msgs.msg.TransitionDescription[],
      };
      export type GetAvailableTransitions_Response_WrapperType = {
        new(other?: GetAvailableTransitions_Response): GetAvailableTransitions_Response,
      }
      export type GetState_Request = {
      };
      export type GetState_Request_WrapperType = {
        new(other?: GetState_Request): GetState_Request,
      }
      export type GetState_Response = {
        current_state: lifecycle_msgs.msg.State,
      };
      export type GetState_Response_WrapperType = {
        new(other?: GetState_Response): GetState_Response,
      }
    }
  }

  namespace logging_demo {
    namespace srv {
      export type ConfigLogger_Request = {
        logger_name: string,
        level: string,
      };
      export type ConfigLogger_Request_WrapperType = {
        new(other?: ConfigLogger_Request): ConfigLogger_Request,
      }
      export type ConfigLogger_Response = {
        success: boolean,
      };
      export type ConfigLogger_Response_WrapperType = {
        new(other?: ConfigLogger_Response): ConfigLogger_Response,
      }
    }
  }

  namespace map_msgs {
    namespace msg {
      export type OccupancyGridUpdate = {
        header: std_msgs.msg.Header,
        x: number,
        y: number,
        width: number,
        height: number,
        data: number[],
      };
      export type OccupancyGridUpdate_WrapperType = {
        new(other?: OccupancyGridUpdate): OccupancyGridUpdate,
      }
      export type PointCloud2Update = {
        header: std_msgs.msg.Header,
        type: number,
        points: sensor_msgs.msg.PointCloud2,
      };
      export type PointCloud2Update_WrapperType = {
        readonly ADD: number,
        readonly DELETE: number,
        new(other?: PointCloud2Update): PointCloud2Update,
      }
      export type ProjectedMap = {
        map: nav_msgs.msg.OccupancyGrid,
        min_z: number,
        max_z: number,
      };
      export type ProjectedMap_WrapperType = {
        new(other?: ProjectedMap): ProjectedMap,
      }
      export type ProjectedMapInfo = {
        frame_id: string,
        x: number,
        y: number,
        width: number,
        height: number,
        min_z: number,
        max_z: number,
      };
      export type ProjectedMapInfo_WrapperType = {
        new(other?: ProjectedMapInfo): ProjectedMapInfo,
      }
    }
    namespace srv {
      export type GetMapROI_Request = {
        x: number,
        y: number,
        l_x: number,
        l_y: number,
      };
      export type GetMapROI_Request_WrapperType = {
        new(other?: GetMapROI_Request): GetMapROI_Request,
      }
      export type GetMapROI_Response = {
        sub_map: nav_msgs.msg.OccupancyGrid,
      };
      export type GetMapROI_Response_WrapperType = {
        new(other?: GetMapROI_Response): GetMapROI_Response,
      }
      export type GetPointMapROI_Request = {
        x: number,
        y: number,
        z: number,
        r: number,
        l_x: number,
        l_y: number,
        l_z: number,
      };
      export type GetPointMapROI_Request_WrapperType = {
        new(other?: GetPointMapROI_Request): GetPointMapROI_Request,
      }
      export type GetPointMapROI_Response = {
        sub_map: sensor_msgs.msg.PointCloud2,
      };
      export type GetPointMapROI_Response_WrapperType = {
        new(other?: GetPointMapROI_Response): GetPointMapROI_Response,
      }
      export type GetPointMap_Request = {
      };
      export type GetPointMap_Request_WrapperType = {
        new(other?: GetPointMap_Request): GetPointMap_Request,
      }
      export type GetPointMap_Response = {
        map: sensor_msgs.msg.PointCloud2,
      };
      export type GetPointMap_Response_WrapperType = {
        new(other?: GetPointMap_Response): GetPointMap_Response,
      }
      export type ProjectedMapsInfo_Request = {
        projected_maps_info: map_msgs.msg.ProjectedMapInfo[],
      };
      export type ProjectedMapsInfo_Request_WrapperType = {
        new(other?: ProjectedMapsInfo_Request): ProjectedMapsInfo_Request,
      }
      export type ProjectedMapsInfo_Response = {
      };
      export type ProjectedMapsInfo_Response_WrapperType = {
        new(other?: ProjectedMapsInfo_Response): ProjectedMapsInfo_Response,
      }
      export type SaveMap_Request = {
        filename: std_msgs.msg.String,
      };
      export type SaveMap_Request_WrapperType = {
        new(other?: SaveMap_Request): SaveMap_Request,
      }
      export type SaveMap_Response = {
      };
      export type SaveMap_Response_WrapperType = {
        new(other?: SaveMap_Response): SaveMap_Response,
      }
      export type SetMapProjections_Request = {
      };
      export type SetMapProjections_Request_WrapperType = {
        new(other?: SetMapProjections_Request): SetMapProjections_Request,
      }
      export type SetMapProjections_Response = {
        projected_maps_info: map_msgs.msg.ProjectedMapInfo[],
      };
      export type SetMapProjections_Response_WrapperType = {
        new(other?: SetMapProjections_Response): SetMapProjections_Response,
      }
    }
  }

  namespace nav_msgs {
    namespace msg {
      export type GridCells = {
        header: std_msgs.msg.Header,
        cell_width: number,
        cell_height: number,
        cells: geometry_msgs.msg.Point[],
      };
      export type GridCells_WrapperType = {
        new(other?: GridCells): GridCells,
      }
      export type MapMetaData = {
        map_load_time: builtin_interfaces.msg.Time,
        resolution: number,
        width: number,
        height: number,
        origin: geometry_msgs.msg.Pose,
      };
      export type MapMetaData_WrapperType = {
        new(other?: MapMetaData): MapMetaData,
      }
      export type OccupancyGrid = {
        header: std_msgs.msg.Header,
        info: nav_msgs.msg.MapMetaData,
        data: number[],
      };
      export type OccupancyGrid_WrapperType = {
        new(other?: OccupancyGrid): OccupancyGrid,
      }
      export type Odometry = {
        header: std_msgs.msg.Header,
        child_frame_id: string,
        pose: geometry_msgs.msg.PoseWithCovariance,
        twist: geometry_msgs.msg.TwistWithCovariance,
      };
      export type Odometry_WrapperType = {
        new(other?: Odometry): Odometry,
      }
      export type Path = {
        header: std_msgs.msg.Header,
        poses: geometry_msgs.msg.PoseStamped[],
      };
      export type Path_WrapperType = {
        new(other?: Path): Path,
      }
    }
    namespace srv {
      export type GetMap_Request = {
      };
      export type GetMap_Request_WrapperType = {
        new(other?: GetMap_Request): GetMap_Request,
      }
      export type GetMap_Response = {
        map: nav_msgs.msg.OccupancyGrid,
      };
      export type GetMap_Response_WrapperType = {
        new(other?: GetMap_Response): GetMap_Response,
      }
      export type GetPlan_Request = {
        start: geometry_msgs.msg.PoseStamped,
        goal: geometry_msgs.msg.PoseStamped,
        tolerance: number,
      };
      export type GetPlan_Request_WrapperType = {
        new(other?: GetPlan_Request): GetPlan_Request,
      }
      export type GetPlan_Response = {
        plan: nav_msgs.msg.Path,
      };
      export type GetPlan_Response_WrapperType = {
        new(other?: GetPlan_Response): GetPlan_Response,
      }
      export type SetMap_Request = {
        map: nav_msgs.msg.OccupancyGrid,
        initial_pose: geometry_msgs.msg.PoseWithCovarianceStamped,
      };
      export type SetMap_Request_WrapperType = {
        new(other?: SetMap_Request): SetMap_Request,
      }
      export type SetMap_Response = {
        success: boolean,
      };
      export type SetMap_Response_WrapperType = {
        new(other?: SetMap_Response): SetMap_Response,
      }
    }
  }

  namespace pcl_msgs {
    namespace msg {
      export type ModelCoefficients = {
        header: std_msgs.msg.Header,
        values: number[],
      };
      export type ModelCoefficients_WrapperType = {
        new(other?: ModelCoefficients): ModelCoefficients,
      }
      export type PointIndices = {
        header: std_msgs.msg.Header,
        indices: number[],
      };
      export type PointIndices_WrapperType = {
        new(other?: PointIndices): PointIndices,
      }
      export type PolygonMesh = {
        header: std_msgs.msg.Header,
        cloud: sensor_msgs.msg.PointCloud2,
        polygons: pcl_msgs.msg.Vertices[],
      };
      export type PolygonMesh_WrapperType = {
        new(other?: PolygonMesh): PolygonMesh,
      }
      export type Vertices = {
        vertices: number[],
      };
      export type Vertices_WrapperType = {
        new(other?: Vertices): Vertices,
      }
    }
    namespace srv {
      export type UpdateFilename_Request = {
        filename: string,
      };
      export type UpdateFilename_Request_WrapperType = {
        new(other?: UpdateFilename_Request): UpdateFilename_Request,
      }
      export type UpdateFilename_Response = {
        success: boolean,
      };
      export type UpdateFilename_Response_WrapperType = {
        new(other?: UpdateFilename_Response): UpdateFilename_Response,
      }
    }
  }

  namespace pendulum_msgs {
    namespace msg {
      export type JointCommand = {
        position: number,
      };
      export type JointCommand_WrapperType = {
        new(other?: JointCommand): JointCommand,
      }
      export type JointState = {
        position: number,
        velocity: number,
        effort: number,
      };
      export type JointState_WrapperType = {
        new(other?: JointState): JointState,
      }
      export type RttestResults = {
        stamp: builtin_interfaces.msg.Time,
        command: pendulum_msgs.msg.JointCommand,
        state: pendulum_msgs.msg.JointState,
        cur_latency: number,
        mean_latency: number,
        min_latency: number,
        max_latency: number,
        minor_pagefaults: number,
        major_pagefaults: number,
      };
      export type RttestResults_WrapperType = {
        new(other?: RttestResults): RttestResults,
      }
    }
  }

  namespace rcl_interfaces {
    namespace msg {
      export type FloatingPointRange = {
        from_value: number,
        to_value: number,
        step: number,
      };
      export type FloatingPointRange_WrapperType = {
        new(other?: FloatingPointRange): FloatingPointRange,
      }
      export type IntegerRange = {
        from_value: number,
        to_value: number,
        step: number,
      };
      export type IntegerRange_WrapperType = {
        new(other?: IntegerRange): IntegerRange,
      }
      export type IntraProcessMessage = {
        publisher_id: number,
        message_sequence: number,
      };
      export type IntraProcessMessage_WrapperType = {
        new(other?: IntraProcessMessage): IntraProcessMessage,
      }
      export type ListParametersResult = {
        names: string[],
        prefixes: string[],
      };
      export type ListParametersResult_WrapperType = {
        new(other?: ListParametersResult): ListParametersResult,
      }
      export type Log = {
        stamp: builtin_interfaces.msg.Time,
        level: number,
        name: string,
        msg: string,
        file: string,
        function: string,
        line: number,
      };
      export type Log_WrapperType = {
        readonly DEBUG: number,
        readonly INFO: number,
        readonly WARN: number,
        readonly ERROR: number,
        readonly FATAL: number,
        new(other?: Log): Log,
      }
      export type Parameter = {
        name: string,
        value: rcl_interfaces.msg.ParameterValue,
      };
      export type Parameter_WrapperType = {
        new(other?: Parameter): Parameter,
      }
      export type ParameterDescriptor = {
        name: string,
        type: number,
        description: string,
        additional_constraints: string,
        read_only: boolean,
        floating_point_range: rcl_interfaces.msg.FloatingPointRange[],
        integer_range: rcl_interfaces.msg.IntegerRange[],
      };
      export type ParameterDescriptor_WrapperType = {
        new(other?: ParameterDescriptor): ParameterDescriptor,
      }
      export type ParameterEvent = {
        stamp: builtin_interfaces.msg.Time,
        node: string,
        new_parameters: rcl_interfaces.msg.Parameter[],
        changed_parameters: rcl_interfaces.msg.Parameter[],
        deleted_parameters: rcl_interfaces.msg.Parameter[],
      };
      export type ParameterEvent_WrapperType = {
        new(other?: ParameterEvent): ParameterEvent,
      }
      export type ParameterEventDescriptors = {
        new_parameters: rcl_interfaces.msg.ParameterDescriptor[],
        changed_parameters: rcl_interfaces.msg.ParameterDescriptor[],
        deleted_parameters: rcl_interfaces.msg.ParameterDescriptor[],
      };
      export type ParameterEventDescriptors_WrapperType = {
        new(other?: ParameterEventDescriptors): ParameterEventDescriptors,
      }
      export type ParameterType = {
      };
      export type ParameterType_WrapperType = {
        readonly PARAMETER_NOT_SET: number,
        readonly PARAMETER_BOOL: number,
        readonly PARAMETER_INTEGER: number,
        readonly PARAMETER_DOUBLE: number,
        readonly PARAMETER_STRING: number,
        readonly PARAMETER_BYTE_ARRAY: number,
        readonly PARAMETER_BOOL_ARRAY: number,
        readonly PARAMETER_INTEGER_ARRAY: number,
        readonly PARAMETER_DOUBLE_ARRAY: number,
        readonly PARAMETER_STRING_ARRAY: number,
        new(other?: ParameterType): ParameterType,
      }
      export type ParameterValue = {
        type: number,
        bool_value: boolean,
        integer_value: number,
        double_value: number,
        string_value: string,
        byte_array_value: number[],
        bool_array_value: boolean[],
        integer_array_value: number[],
        double_array_value: number[],
        string_array_value: string[],
      };
      export type ParameterValue_WrapperType = {
        new(other?: ParameterValue): ParameterValue,
      }
      export type SetParametersResult = {
        successful: boolean,
        reason: string,
      };
      export type SetParametersResult_WrapperType = {
        new(other?: SetParametersResult): SetParametersResult,
      }
    }
    namespace srv {
      export type DescribeParameters_Request = {
        names: string[],
      };
      export type DescribeParameters_Request_WrapperType = {
        new(other?: DescribeParameters_Request): DescribeParameters_Request,
      }
      export type DescribeParameters_Response = {
        descriptors: rcl_interfaces.msg.ParameterDescriptor[],
      };
      export type DescribeParameters_Response_WrapperType = {
        new(other?: DescribeParameters_Response): DescribeParameters_Response,
      }
      export type GetParameterTypes_Request = {
        names: string[],
      };
      export type GetParameterTypes_Request_WrapperType = {
        new(other?: GetParameterTypes_Request): GetParameterTypes_Request,
      }
      export type GetParameterTypes_Response = {
        types: number[],
      };
      export type GetParameterTypes_Response_WrapperType = {
        new(other?: GetParameterTypes_Response): GetParameterTypes_Response,
      }
      export type GetParameters_Request = {
        names: string[],
      };
      export type GetParameters_Request_WrapperType = {
        new(other?: GetParameters_Request): GetParameters_Request,
      }
      export type GetParameters_Response = {
        values: rcl_interfaces.msg.ParameterValue[],
      };
      export type GetParameters_Response_WrapperType = {
        new(other?: GetParameters_Response): GetParameters_Response,
      }
      export type ListParameters_Request = {
        prefixes: string[],
        depth: number,
      };
      export type ListParameters_Request_WrapperType = {
        readonly DEPTH_RECURSIVE: number,
        new(other?: ListParameters_Request): ListParameters_Request,
      }
      export type ListParameters_Response = {
        result: rcl_interfaces.msg.ListParametersResult,
      };
      export type ListParameters_Response_WrapperType = {
        new(other?: ListParameters_Response): ListParameters_Response,
      }
      export type SetParametersAtomically_Request = {
        parameters: rcl_interfaces.msg.Parameter[],
      };
      export type SetParametersAtomically_Request_WrapperType = {
        new(other?: SetParametersAtomically_Request): SetParametersAtomically_Request,
      }
      export type SetParametersAtomically_Response = {
        result: rcl_interfaces.msg.SetParametersResult,
      };
      export type SetParametersAtomically_Response_WrapperType = {
        new(other?: SetParametersAtomically_Response): SetParametersAtomically_Response,
      }
      export type SetParameters_Request = {
        parameters: rcl_interfaces.msg.Parameter[],
      };
      export type SetParameters_Request_WrapperType = {
        new(other?: SetParameters_Request): SetParameters_Request,
      }
      export type SetParameters_Response = {
        results: rcl_interfaces.msg.SetParametersResult[],
      };
      export type SetParameters_Response_WrapperType = {
        new(other?: SetParameters_Response): SetParameters_Response,
      }
    }
  }

  namespace rosgraph_msgs {
    namespace msg {
      export type Clock = {
        clock: builtin_interfaces.msg.Time,
      };
      export type Clock_WrapperType = {
        new(other?: Clock): Clock,
      }
    }
  }

  namespace rqt_py_common {
    namespace msg {
      export type ArrayVal = {
        vals: rqt_py_common.msg.Val[],
      };
      export type ArrayVal_WrapperType = {
        new(other?: ArrayVal): ArrayVal,
      }
      export type Val = {
        floats: number[],
      };
      export type Val_WrapperType = {
        new(other?: Val): Val,
      }
    }
    namespace srv {
      export type AddTwoInts_Request = {
        a: number,
        b: number,
      };
      export type AddTwoInts_Request_WrapperType = {
        new(other?: AddTwoInts_Request): AddTwoInts_Request,
      }
      export type AddTwoInts_Response = {
        sum: number,
      };
      export type AddTwoInts_Response_WrapperType = {
        new(other?: AddTwoInts_Response): AddTwoInts_Response,
      }
    }
  }

  namespace sensor_msgs {
    namespace msg {
      export type BatteryState = {
        header: std_msgs.msg.Header,
        voltage: number,
        temperature: number,
        current: number,
        charge: number,
        capacity: number,
        design_capacity: number,
        percentage: number,
        power_supply_status: number,
        power_supply_health: number,
        power_supply_technology: number,
        present: boolean,
        cell_voltage: number[],
        cell_temperature: number[],
        location: string,
        serial_number: string,
      };
      export type BatteryState_WrapperType = {
        readonly POWER_SUPPLY_STATUS_UNKNOWN: number,
        readonly POWER_SUPPLY_STATUS_CHARGING: number,
        readonly POWER_SUPPLY_STATUS_DISCHARGING: number,
        readonly POWER_SUPPLY_STATUS_NOT_CHARGING: number,
        readonly POWER_SUPPLY_STATUS_FULL: number,
        readonly POWER_SUPPLY_HEALTH_UNKNOWN: number,
        readonly POWER_SUPPLY_HEALTH_GOOD: number,
        readonly POWER_SUPPLY_HEALTH_OVERHEAT: number,
        readonly POWER_SUPPLY_HEALTH_DEAD: number,
        readonly POWER_SUPPLY_HEALTH_OVERVOLTAGE: number,
        readonly POWER_SUPPLY_HEALTH_UNSPEC_FAILURE: number,
        readonly POWER_SUPPLY_HEALTH_COLD: number,
        readonly POWER_SUPPLY_HEALTH_WATCHDOG_TIMER_EXPIRE: number,
        readonly POWER_SUPPLY_HEALTH_SAFETY_TIMER_EXPIRE: number,
        readonly POWER_SUPPLY_TECHNOLOGY_UNKNOWN: number,
        readonly POWER_SUPPLY_TECHNOLOGY_NIMH: number,
        readonly POWER_SUPPLY_TECHNOLOGY_LION: number,
        readonly POWER_SUPPLY_TECHNOLOGY_LIPO: number,
        readonly POWER_SUPPLY_TECHNOLOGY_LIFE: number,
        readonly POWER_SUPPLY_TECHNOLOGY_NICD: number,
        readonly POWER_SUPPLY_TECHNOLOGY_LIMN: number,
        new(other?: BatteryState): BatteryState,
      }
      export type CameraInfo = {
        header: std_msgs.msg.Header,
        height: number,
        width: number,
        distortion_model: string,
        d: number[],
        k: number[],
        r: number[],
        p: number[],
        binning_x: number,
        binning_y: number,
        roi: sensor_msgs.msg.RegionOfInterest,
      };
      export type CameraInfo_WrapperType = {
        new(other?: CameraInfo): CameraInfo,
      }
      export type ChannelFloat32 = {
        name: string,
        values: number[],
      };
      export type ChannelFloat32_WrapperType = {
        new(other?: ChannelFloat32): ChannelFloat32,
      }
      export type CompressedImage = {
        header: std_msgs.msg.Header,
        format: string,
        data: number[],
      };
      export type CompressedImage_WrapperType = {
        new(other?: CompressedImage): CompressedImage,
      }
      export type FluidPressure = {
        header: std_msgs.msg.Header,
        fluid_pressure: number,
        variance: number,
      };
      export type FluidPressure_WrapperType = {
        new(other?: FluidPressure): FluidPressure,
      }
      export type Illuminance = {
        header: std_msgs.msg.Header,
        illuminance: number,
        variance: number,
      };
      export type Illuminance_WrapperType = {
        new(other?: Illuminance): Illuminance,
      }
      export type Image = {
        header: std_msgs.msg.Header,
        height: number,
        width: number,
        encoding: string,
        is_bigendian: number,
        step: number,
        data: number[],
      };
      export type Image_WrapperType = {
        new(other?: Image): Image,
      }
      export type Imu = {
        header: std_msgs.msg.Header,
        orientation: geometry_msgs.msg.Quaternion,
        orientation_covariance: number[],
        angular_velocity: geometry_msgs.msg.Vector3,
        angular_velocity_covariance: number[],
        linear_acceleration: geometry_msgs.msg.Vector3,
        linear_acceleration_covariance: number[],
      };
      export type Imu_WrapperType = {
        new(other?: Imu): Imu,
      }
      export type JointState = {
        header: std_msgs.msg.Header,
        name: string[],
        position: number[],
        velocity: number[],
        effort: number[],
      };
      export type JointState_WrapperType = {
        new(other?: JointState): JointState,
      }
      export type Joy = {
        header: std_msgs.msg.Header,
        axes: number[],
        buttons: number[],
      };
      export type Joy_WrapperType = {
        new(other?: Joy): Joy,
      }
      export type JoyFeedback = {
        type: number,
        id: number,
        intensity: number,
      };
      export type JoyFeedback_WrapperType = {
        readonly TYPE_LED: number,
        readonly TYPE_RUMBLE: number,
        readonly TYPE_BUZZER: number,
        new(other?: JoyFeedback): JoyFeedback,
      }
      export type JoyFeedbackArray = {
        array: sensor_msgs.msg.JoyFeedback[],
      };
      export type JoyFeedbackArray_WrapperType = {
        new(other?: JoyFeedbackArray): JoyFeedbackArray,
      }
      export type LaserEcho = {
        echoes: number[],
      };
      export type LaserEcho_WrapperType = {
        new(other?: LaserEcho): LaserEcho,
      }
      export type LaserScan = {
        header: std_msgs.msg.Header,
        angle_min: number,
        angle_max: number,
        angle_increment: number,
        time_increment: number,
        scan_time: number,
        range_min: number,
        range_max: number,
        ranges: number[],
        intensities: number[],
      };
      export type LaserScan_WrapperType = {
        new(other?: LaserScan): LaserScan,
      }
      export type MagneticField = {
        header: std_msgs.msg.Header,
        magnetic_field: geometry_msgs.msg.Vector3,
        magnetic_field_covariance: number[],
      };
      export type MagneticField_WrapperType = {
        new(other?: MagneticField): MagneticField,
      }
      export type MultiDOFJointState = {
        header: std_msgs.msg.Header,
        joint_names: string[],
        transforms: geometry_msgs.msg.Transform[],
        twist: geometry_msgs.msg.Twist[],
        wrench: geometry_msgs.msg.Wrench[],
      };
      export type MultiDOFJointState_WrapperType = {
        new(other?: MultiDOFJointState): MultiDOFJointState,
      }
      export type MultiEchoLaserScan = {
        header: std_msgs.msg.Header,
        angle_min: number,
        angle_max: number,
        angle_increment: number,
        time_increment: number,
        scan_time: number,
        range_min: number,
        range_max: number,
        ranges: sensor_msgs.msg.LaserEcho[],
        intensities: sensor_msgs.msg.LaserEcho[],
      };
      export type MultiEchoLaserScan_WrapperType = {
        new(other?: MultiEchoLaserScan): MultiEchoLaserScan,
      }
      export type NavSatFix = {
        header: std_msgs.msg.Header,
        status: sensor_msgs.msg.NavSatStatus,
        latitude: number,
        longitude: number,
        altitude: number,
        position_covariance: number[],
        position_covariance_type: number,
      };
      export type NavSatFix_WrapperType = {
        readonly COVARIANCE_TYPE_UNKNOWN: number,
        readonly COVARIANCE_TYPE_APPROXIMATED: number,
        readonly COVARIANCE_TYPE_DIAGONAL_KNOWN: number,
        readonly COVARIANCE_TYPE_KNOWN: number,
        new(other?: NavSatFix): NavSatFix,
      }
      export type NavSatStatus = {
        status: number,
        service: number,
      };
      export type NavSatStatus_WrapperType = {
        readonly STATUS_NO_FIX: number,
        readonly STATUS_FIX: number,
        readonly STATUS_SBAS_FIX: number,
        readonly STATUS_GBAS_FIX: number,
        readonly SERVICE_GPS: number,
        readonly SERVICE_GLONASS: number,
        readonly SERVICE_COMPASS: number,
        readonly SERVICE_GALILEO: number,
        new(other?: NavSatStatus): NavSatStatus,
      }
      export type PointCloud = {
        header: std_msgs.msg.Header,
        points: geometry_msgs.msg.Point32[],
        channels: sensor_msgs.msg.ChannelFloat32[],
      };
      export type PointCloud_WrapperType = {
        new(other?: PointCloud): PointCloud,
      }
      export type PointCloud2 = {
        header: std_msgs.msg.Header,
        height: number,
        width: number,
        fields: sensor_msgs.msg.PointField[],
        is_bigendian: boolean,
        point_step: number,
        row_step: number,
        data: number[],
        is_dense: boolean,
      };
      export type PointCloud2_WrapperType = {
        new(other?: PointCloud2): PointCloud2,
      }
      export type PointField = {
        name: string,
        offset: number,
        datatype: number,
        count: number,
      };
      export type PointField_WrapperType = {
        readonly INT8: number,
        readonly UINT8: number,
        readonly INT16: number,
        readonly UINT16: number,
        readonly INT32: number,
        readonly UINT32: number,
        readonly FLOAT32: number,
        readonly FLOAT64: number,
        new(other?: PointField): PointField,
      }
      export type Range = {
        header: std_msgs.msg.Header,
        radiation_type: number,
        field_of_view: number,
        min_range: number,
        max_range: number,
        range: number,
      };
      export type Range_WrapperType = {
        readonly ULTRASOUND: number,
        readonly INFRARED: number,
        new(other?: Range): Range,
      }
      export type RegionOfInterest = {
        x_offset: number,
        y_offset: number,
        height: number,
        width: number,
        do_rectify: boolean,
      };
      export type RegionOfInterest_WrapperType = {
        new(other?: RegionOfInterest): RegionOfInterest,
      }
      export type RelativeHumidity = {
        header: std_msgs.msg.Header,
        relative_humidity: number,
        variance: number,
      };
      export type RelativeHumidity_WrapperType = {
        new(other?: RelativeHumidity): RelativeHumidity,
      }
      export type Temperature = {
        header: std_msgs.msg.Header,
        temperature: number,
        variance: number,
      };
      export type Temperature_WrapperType = {
        new(other?: Temperature): Temperature,
      }
      export type TimeReference = {
        header: std_msgs.msg.Header,
        time_ref: builtin_interfaces.msg.Time,
        source: string,
      };
      export type TimeReference_WrapperType = {
        new(other?: TimeReference): TimeReference,
      }
    }
    namespace srv {
      export type SetCameraInfo_Request = {
        camera_info: sensor_msgs.msg.CameraInfo,
      };
      export type SetCameraInfo_Request_WrapperType = {
        new(other?: SetCameraInfo_Request): SetCameraInfo_Request,
      }
      export type SetCameraInfo_Response = {
        success: boolean,
        status_message: string,
      };
      export type SetCameraInfo_Response_WrapperType = {
        new(other?: SetCameraInfo_Response): SetCameraInfo_Response,
      }
    }
  }

  namespace shape_msgs {
    namespace msg {
      export type Mesh = {
        triangles: shape_msgs.msg.MeshTriangle[],
        vertices: geometry_msgs.msg.Point[],
      };
      export type Mesh_WrapperType = {
        new(other?: Mesh): Mesh,
      }
      export type MeshTriangle = {
        vertex_indices: number[],
      };
      export type MeshTriangle_WrapperType = {
        new(other?: MeshTriangle): MeshTriangle,
      }
      export type Plane = {
        coef: number[],
      };
      export type Plane_WrapperType = {
        new(other?: Plane): Plane,
      }
      export type SolidPrimitive = {
        type: number,
        dimensions: number[],
      };
      export type SolidPrimitive_WrapperType = {
        readonly BOX: number,
        readonly SPHERE: number,
        readonly CYLINDER: number,
        readonly CONE: number,
        readonly BOX_X: number,
        readonly BOX_Y: number,
        readonly BOX_Z: number,
        readonly SPHERE_RADIUS: number,
        readonly CYLINDER_HEIGHT: number,
        readonly CYLINDER_RADIUS: number,
        readonly CONE_HEIGHT: number,
        readonly CONE_RADIUS: number,
        new(other?: SolidPrimitive): SolidPrimitive,
      }
    }
  }

  namespace std_msgs {
    namespace msg {
      export type Bool = {
        data: boolean,
      };
      export type Bool_WrapperType = {
        new(other?: Bool): Bool,
      }
      export type Byte = {
        data: number,
      };
      export type Byte_WrapperType = {
        new(other?: Byte): Byte,
      }
      export type ByteMultiArray = {
        layout: std_msgs.msg.MultiArrayLayout,
        data: number[],
      };
      export type ByteMultiArray_WrapperType = {
        new(other?: ByteMultiArray): ByteMultiArray,
      }
      export type Char = {
        data: number,
      };
      export type Char_WrapperType = {
        new(other?: Char): Char,
      }
      export type ColorRGBA = {
        r: number,
        g: number,
        b: number,
        a: number,
      };
      export type ColorRGBA_WrapperType = {
        new(other?: ColorRGBA): ColorRGBA,
      }
      export type Empty = {
      };
      export type Empty_WrapperType = {
        new(other?: Empty): Empty,
      }
      export type Float32 = {
        data: number,
      };
      export type Float32_WrapperType = {
        new(other?: Float32): Float32,
      }
      export type Float32MultiArray = {
        layout: std_msgs.msg.MultiArrayLayout,
        data: number[],
      };
      export type Float32MultiArray_WrapperType = {
        new(other?: Float32MultiArray): Float32MultiArray,
      }
      export type Float64 = {
        data: number,
      };
      export type Float64_WrapperType = {
        new(other?: Float64): Float64,
      }
      export type Float64MultiArray = {
        layout: std_msgs.msg.MultiArrayLayout,
        data: number[],
      };
      export type Float64MultiArray_WrapperType = {
        new(other?: Float64MultiArray): Float64MultiArray,
      }
      export type Header = {
        stamp: builtin_interfaces.msg.Time,
        frame_id: string,
      };
      export type Header_WrapperType = {
        new(other?: Header): Header,
      }
      export type Int16 = {
        data: number,
      };
      export type Int16_WrapperType = {
        new(other?: Int16): Int16,
      }
      export type Int16MultiArray = {
        layout: std_msgs.msg.MultiArrayLayout,
        data: number[],
      };
      export type Int16MultiArray_WrapperType = {
        new(other?: Int16MultiArray): Int16MultiArray,
      }
      export type Int32 = {
        data: number,
      };
      export type Int32_WrapperType = {
        new(other?: Int32): Int32,
      }
      export type Int32MultiArray = {
        layout: std_msgs.msg.MultiArrayLayout,
        data: number[],
      };
      export type Int32MultiArray_WrapperType = {
        new(other?: Int32MultiArray): Int32MultiArray,
      }
      export type Int64 = {
        data: number,
      };
      export type Int64_WrapperType = {
        new(other?: Int64): Int64,
      }
      export type Int64MultiArray = {
        layout: std_msgs.msg.MultiArrayLayout,
        data: number[],
      };
      export type Int64MultiArray_WrapperType = {
        new(other?: Int64MultiArray): Int64MultiArray,
      }
      export type Int8 = {
        data: number,
      };
      export type Int8_WrapperType = {
        new(other?: Int8): Int8,
      }
      export type Int8MultiArray = {
        layout: std_msgs.msg.MultiArrayLayout,
        data: number[],
      };
      export type Int8MultiArray_WrapperType = {
        new(other?: Int8MultiArray): Int8MultiArray,
      }
      export type MultiArrayDimension = {
        label: string,
        size: number,
        stride: number,
      };
      export type MultiArrayDimension_WrapperType = {
        new(other?: MultiArrayDimension): MultiArrayDimension,
      }
      export type MultiArrayLayout = {
        dim: std_msgs.msg.MultiArrayDimension[],
        data_offset: number,
      };
      export type MultiArrayLayout_WrapperType = {
        new(other?: MultiArrayLayout): MultiArrayLayout,
      }
      export type String = {
        data: string,
      };
      export type String_WrapperType = {
        new(other?: String): String,
      }
      export type UInt16 = {
        data: number,
      };
      export type UInt16_WrapperType = {
        new(other?: UInt16): UInt16,
      }
      export type UInt16MultiArray = {
        layout: std_msgs.msg.MultiArrayLayout,
        data: number[],
      };
      export type UInt16MultiArray_WrapperType = {
        new(other?: UInt16MultiArray): UInt16MultiArray,
      }
      export type UInt32 = {
        data: number,
      };
      export type UInt32_WrapperType = {
        new(other?: UInt32): UInt32,
      }
      export type UInt32MultiArray = {
        layout: std_msgs.msg.MultiArrayLayout,
        data: number[],
      };
      export type UInt32MultiArray_WrapperType = {
        new(other?: UInt32MultiArray): UInt32MultiArray,
      }
      export type UInt64 = {
        data: number,
      };
      export type UInt64_WrapperType = {
        new(other?: UInt64): UInt64,
      }
      export type UInt64MultiArray = {
        layout: std_msgs.msg.MultiArrayLayout,
        data: number[],
      };
      export type UInt64MultiArray_WrapperType = {
        new(other?: UInt64MultiArray): UInt64MultiArray,
      }
      export type UInt8 = {
        data: number,
      };
      export type UInt8_WrapperType = {
        new(other?: UInt8): UInt8,
      }
      export type UInt8MultiArray = {
        layout: std_msgs.msg.MultiArrayLayout,
        data: number[],
      };
      export type UInt8MultiArray_WrapperType = {
        new(other?: UInt8MultiArray): UInt8MultiArray,
      }
    }
  }

  namespace std_srvs {
    namespace srv {
      export type Empty_Request = {
      };
      export type Empty_Request_WrapperType = {
        new(other?: Empty_Request): Empty_Request,
      }
      export type Empty_Response = {
      };
      export type Empty_Response_WrapperType = {
        new(other?: Empty_Response): Empty_Response,
      }
      export type SetBool_Request = {
        data: boolean,
      };
      export type SetBool_Request_WrapperType = {
        new(other?: SetBool_Request): SetBool_Request,
      }
      export type SetBool_Response = {
        success: boolean,
        message: string,
      };
      export type SetBool_Response_WrapperType = {
        new(other?: SetBool_Response): SetBool_Response,
      }
      export type Trigger_Request = {
      };
      export type Trigger_Request_WrapperType = {
        new(other?: Trigger_Request): Trigger_Request,
      }
      export type Trigger_Response = {
        success: boolean,
        message: string,
      };
      export type Trigger_Response_WrapperType = {
        new(other?: Trigger_Response): Trigger_Response,
      }
    }
  }

  namespace stereo_msgs {
    namespace msg {
      export type DisparityImage = {
        header: std_msgs.msg.Header,
        image: sensor_msgs.msg.Image,
        f: number,
        t: number,
        valid_window: sensor_msgs.msg.RegionOfInterest,
        min_disparity: number,
        max_disparity: number,
        delta_d: number,
      };
      export type DisparityImage_WrapperType = {
        new(other?: DisparityImage): DisparityImage,
      }
    }
  }

  namespace tf2_msgs {
    namespace msg {
      export type TF2Error = {
        error: number,
        error_string: string,
      };
      export type TF2Error_WrapperType = {
        readonly NO_ERROR: number,
        readonly LOOKUP_ERROR: number,
        readonly CONNECTIVITY_ERROR: number,
        readonly EXTRAPOLATION_ERROR: number,
        readonly INVALID_ARGUMENT_ERROR: number,
        readonly TIMEOUT_ERROR: number,
        readonly TRANSFORM_ERROR: number,
        new(other?: TF2Error): TF2Error,
      }
      export type TFMessage = {
        transforms: geometry_msgs.msg.TransformStamped[],
      };
      export type TFMessage_WrapperType = {
        new(other?: TFMessage): TFMessage,
      }
    }
    namespace srv {
      export type FrameGraph_Request = {
      };
      export type FrameGraph_Request_WrapperType = {
        new(other?: FrameGraph_Request): FrameGraph_Request,
      }
      export type FrameGraph_Response = {
        frame_yaml: string,
      };
      export type FrameGraph_Response_WrapperType = {
        new(other?: FrameGraph_Response): FrameGraph_Response,
      }
    }
  }

  namespace trajectory_msgs {
    namespace msg {
      export type JointTrajectory = {
        header: std_msgs.msg.Header,
        joint_names: string[],
        points: trajectory_msgs.msg.JointTrajectoryPoint[],
      };
      export type JointTrajectory_WrapperType = {
        new(other?: JointTrajectory): JointTrajectory,
      }
      export type JointTrajectoryPoint = {
        positions: number[],
        velocities: number[],
        accelerations: number[],
        effort: number[],
        time_from_start: builtin_interfaces.msg.Duration,
      };
      export type JointTrajectoryPoint_WrapperType = {
        new(other?: JointTrajectoryPoint): JointTrajectoryPoint,
      }
      export type MultiDOFJointTrajectory = {
        header: std_msgs.msg.Header,
        joint_names: string[],
        points: trajectory_msgs.msg.MultiDOFJointTrajectoryPoint[],
      };
      export type MultiDOFJointTrajectory_WrapperType = {
        new(other?: MultiDOFJointTrajectory): MultiDOFJointTrajectory,
      }
      export type MultiDOFJointTrajectoryPoint = {
        transforms: geometry_msgs.msg.Transform[],
        velocities: geometry_msgs.msg.Twist[],
        accelerations: geometry_msgs.msg.Twist[],
        time_from_start: builtin_interfaces.msg.Duration,
      };
      export type MultiDOFJointTrajectoryPoint_WrapperType = {
        new(other?: MultiDOFJointTrajectoryPoint): MultiDOFJointTrajectoryPoint,
      }
    }
  }

  namespace unique_identifier_msgs {
    namespace msg {
      export type UUID = {
        uuid: number[],
      };
      export type UUID_WrapperType = {
        new(other?: UUID): UUID,
      }
    }
  }

  namespace visualization_msgs {
    namespace msg {
      export type ImageMarker = {
        header: std_msgs.msg.Header,
        ns: string,
        id: number,
        type: number,
        action: number,
        position: geometry_msgs.msg.Point,
        scale: number,
        outline_color: std_msgs.msg.ColorRGBA,
        filled: number,
        fill_color: std_msgs.msg.ColorRGBA,
        lifetime: builtin_interfaces.msg.Duration,
        points: geometry_msgs.msg.Point[],
        outline_colors: std_msgs.msg.ColorRGBA[],
      };
      export type ImageMarker_WrapperType = {
        readonly CIRCLE: number,
        readonly LINE_STRIP: number,
        readonly LINE_LIST: number,
        readonly POLYGON: number,
        readonly POINTS: number,
        readonly ADD: number,
        readonly REMOVE: number,
        new(other?: ImageMarker): ImageMarker,
      }
      export type InteractiveMarker = {
        header: std_msgs.msg.Header,
        pose: geometry_msgs.msg.Pose,
        name: string,
        description: string,
        scale: number,
        menu_entries: visualization_msgs.msg.MenuEntry[],
        controls: visualization_msgs.msg.InteractiveMarkerControl[],
      };
      export type InteractiveMarker_WrapperType = {
        new(other?: InteractiveMarker): InteractiveMarker,
      }
      export type InteractiveMarkerControl = {
        name: string,
        orientation: geometry_msgs.msg.Quaternion,
        orientation_mode: number,
        interaction_mode: number,
        always_visible: boolean,
        markers: visualization_msgs.msg.Marker[],
        independent_marker_orientation: boolean,
        description: string,
      };
      export type InteractiveMarkerControl_WrapperType = {
        readonly INHERIT: number,
        readonly FIXED: number,
        readonly VIEW_FACING: number,
        readonly NONE: number,
        readonly MENU: number,
        readonly BUTTON: number,
        readonly MOVE_AXIS: number,
        readonly MOVE_PLANE: number,
        readonly ROTATE_AXIS: number,
        readonly MOVE_ROTATE: number,
        readonly MOVE_3D: number,
        readonly ROTATE_3D: number,
        readonly MOVE_ROTATE_3D: number,
        new(other?: InteractiveMarkerControl): InteractiveMarkerControl,
      }
      export type InteractiveMarkerFeedback = {
        header: std_msgs.msg.Header,
        client_id: string,
        marker_name: string,
        control_name: string,
        event_type: number,
        pose: geometry_msgs.msg.Pose,
        menu_entry_id: number,
        mouse_point: geometry_msgs.msg.Point,
        mouse_point_valid: boolean,
      };
      export type InteractiveMarkerFeedback_WrapperType = {
        readonly KEEP_ALIVE: number,
        readonly POSE_UPDATE: number,
        readonly MENU_SELECT: number,
        readonly BUTTON_CLICK: number,
        readonly MOUSE_DOWN: number,
        readonly MOUSE_UP: number,
        new(other?: InteractiveMarkerFeedback): InteractiveMarkerFeedback,
      }
      export type InteractiveMarkerInit = {
        server_id: string,
        seq_num: number,
        markers: visualization_msgs.msg.InteractiveMarker[],
      };
      export type InteractiveMarkerInit_WrapperType = {
        new(other?: InteractiveMarkerInit): InteractiveMarkerInit,
      }
      export type InteractiveMarkerPose = {
        header: std_msgs.msg.Header,
        pose: geometry_msgs.msg.Pose,
        name: string,
      };
      export type InteractiveMarkerPose_WrapperType = {
        new(other?: InteractiveMarkerPose): InteractiveMarkerPose,
      }
      export type InteractiveMarkerUpdate = {
        server_id: string,
        seq_num: number,
        type: number,
        markers: visualization_msgs.msg.InteractiveMarker[],
        poses: visualization_msgs.msg.InteractiveMarkerPose[],
        erases: string[],
      };
      export type InteractiveMarkerUpdate_WrapperType = {
        readonly KEEP_ALIVE: number,
        readonly UPDATE: number,
        new(other?: InteractiveMarkerUpdate): InteractiveMarkerUpdate,
      }
      export type Marker = {
        header: std_msgs.msg.Header,
        ns: string,
        id: number,
        type: number,
        action: number,
        pose: geometry_msgs.msg.Pose,
        scale: geometry_msgs.msg.Vector3,
        color: std_msgs.msg.ColorRGBA,
        lifetime: builtin_interfaces.msg.Duration,
        frame_locked: boolean,
        points: geometry_msgs.msg.Point[],
        colors: std_msgs.msg.ColorRGBA[],
        text: string,
        mesh_resource: string,
        mesh_use_embedded_materials: boolean,
      };
      export type Marker_WrapperType = {
        readonly ARROW: number,
        readonly CUBE: number,
        readonly SPHERE: number,
        readonly CYLINDER: number,
        readonly LINE_STRIP: number,
        readonly LINE_LIST: number,
        readonly CUBE_LIST: number,
        readonly SPHERE_LIST: number,
        readonly POINTS: number,
        readonly TEXT_VIEW_FACING: number,
        readonly MESH_RESOURCE: number,
        readonly TRIANGLE_LIST: number,
        readonly ADD: number,
        readonly MODIFY: number,
        readonly DELETE: number,
        readonly DELETEALL: number,
        new(other?: Marker): Marker,
      }
      export type MarkerArray = {
        markers: visualization_msgs.msg.Marker[],
      };
      export type MarkerArray_WrapperType = {
        new(other?: MarkerArray): MarkerArray,
      }
      export type MenuEntry = {
        id: number,
        parent_id: number,
        title: string,
        command: string,
        command_type: number,
      };
      export type MenuEntry_WrapperType = {
        readonly FEEDBACK: number,
        readonly ROSRUN: number,
        readonly ROSLAUNCH: number,
        new(other?: MenuEntry): MenuEntry,
      }
    }
    namespace srv {
      export type GetInteractiveMarkers_Request = {
      };
      export type GetInteractiveMarkers_Request_WrapperType = {
        new(other?: GetInteractiveMarkers_Request): GetInteractiveMarkers_Request,
      }
      export type GetInteractiveMarkers_Response = {
        sequence_number: number,
        markers: visualization_msgs.msg.InteractiveMarker[],
      };
      export type GetInteractiveMarkers_Response_WrapperType = {
        new(other?: GetInteractiveMarkers_Response): GetInteractiveMarkers_Response,
      }
    }
  }

  type MessagesMap = {
    'string': string,
    'action_msgs/msg/GoalInfo': action_msgs.msg.GoalInfo,
    'action_msgs/msg/GoalStatus': action_msgs.msg.GoalStatus,
    'action_msgs/msg/GoalStatusArray': action_msgs.msg.GoalStatusArray,
    'action_msgs/srv/CancelGoal_Request': action_msgs.srv.CancelGoal_Request,
    'action_msgs/srv/CancelGoal_Response': action_msgs.srv.CancelGoal_Response,
    'actionlib_msgs/msg/GoalID': actionlib_msgs.msg.GoalID,
    'actionlib_msgs/msg/GoalStatus': actionlib_msgs.msg.GoalStatus,
    'actionlib_msgs/msg/GoalStatusArray': actionlib_msgs.msg.GoalStatusArray,
    'builtin_interfaces/msg/Duration': builtin_interfaces.msg.Duration,
    'builtin_interfaces/msg/Time': builtin_interfaces.msg.Time,
    'composition_interfaces/srv/ListNodes_Request': composition_interfaces.srv.ListNodes_Request,
    'composition_interfaces/srv/ListNodes_Response': composition_interfaces.srv.ListNodes_Response,
    'composition_interfaces/srv/LoadNode_Request': composition_interfaces.srv.LoadNode_Request,
    'composition_interfaces/srv/LoadNode_Response': composition_interfaces.srv.LoadNode_Response,
    'composition_interfaces/srv/UnloadNode_Request': composition_interfaces.srv.UnloadNode_Request,
    'composition_interfaces/srv/UnloadNode_Response': composition_interfaces.srv.UnloadNode_Response,
    'diagnostic_msgs/msg/DiagnosticArray': diagnostic_msgs.msg.DiagnosticArray,
    'diagnostic_msgs/msg/DiagnosticStatus': diagnostic_msgs.msg.DiagnosticStatus,
    'diagnostic_msgs/msg/KeyValue': diagnostic_msgs.msg.KeyValue,
    'diagnostic_msgs/srv/AddDiagnostics_Request': diagnostic_msgs.srv.AddDiagnostics_Request,
    'diagnostic_msgs/srv/AddDiagnostics_Response': diagnostic_msgs.srv.AddDiagnostics_Response,
    'diagnostic_msgs/srv/SelfTest_Request': diagnostic_msgs.srv.SelfTest_Request,
    'diagnostic_msgs/srv/SelfTest_Response': diagnostic_msgs.srv.SelfTest_Response,
    'example_interfaces/srv/AddTwoInts_Request': example_interfaces.srv.AddTwoInts_Request,
    'example_interfaces/srv/AddTwoInts_Response': example_interfaces.srv.AddTwoInts_Response,
    'geometry_msgs/msg/Accel': geometry_msgs.msg.Accel,
    'geometry_msgs/msg/AccelStamped': geometry_msgs.msg.AccelStamped,
    'geometry_msgs/msg/AccelWithCovariance': geometry_msgs.msg.AccelWithCovariance,
    'geometry_msgs/msg/AccelWithCovarianceStamped': geometry_msgs.msg.AccelWithCovarianceStamped,
    'geometry_msgs/msg/Inertia': geometry_msgs.msg.Inertia,
    'geometry_msgs/msg/InertiaStamped': geometry_msgs.msg.InertiaStamped,
    'geometry_msgs/msg/Point': geometry_msgs.msg.Point,
    'geometry_msgs/msg/Point32': geometry_msgs.msg.Point32,
    'geometry_msgs/msg/PointStamped': geometry_msgs.msg.PointStamped,
    'geometry_msgs/msg/Polygon': geometry_msgs.msg.Polygon,
    'geometry_msgs/msg/PolygonStamped': geometry_msgs.msg.PolygonStamped,
    'geometry_msgs/msg/Pose': geometry_msgs.msg.Pose,
    'geometry_msgs/msg/Pose2D': geometry_msgs.msg.Pose2D,
    'geometry_msgs/msg/PoseArray': geometry_msgs.msg.PoseArray,
    'geometry_msgs/msg/PoseStamped': geometry_msgs.msg.PoseStamped,
    'geometry_msgs/msg/PoseWithCovariance': geometry_msgs.msg.PoseWithCovariance,
    'geometry_msgs/msg/PoseWithCovarianceStamped': geometry_msgs.msg.PoseWithCovarianceStamped,
    'geometry_msgs/msg/Quaternion': geometry_msgs.msg.Quaternion,
    'geometry_msgs/msg/QuaternionStamped': geometry_msgs.msg.QuaternionStamped,
    'geometry_msgs/msg/Transform': geometry_msgs.msg.Transform,
    'geometry_msgs/msg/TransformStamped': geometry_msgs.msg.TransformStamped,
    'geometry_msgs/msg/Twist': geometry_msgs.msg.Twist,
    'geometry_msgs/msg/TwistStamped': geometry_msgs.msg.TwistStamped,
    'geometry_msgs/msg/TwistWithCovariance': geometry_msgs.msg.TwistWithCovariance,
    'geometry_msgs/msg/TwistWithCovarianceStamped': geometry_msgs.msg.TwistWithCovarianceStamped,
    'geometry_msgs/msg/Vector3': geometry_msgs.msg.Vector3,
    'geometry_msgs/msg/Vector3Stamped': geometry_msgs.msg.Vector3Stamped,
    'geometry_msgs/msg/Wrench': geometry_msgs.msg.Wrench,
    'geometry_msgs/msg/WrenchStamped': geometry_msgs.msg.WrenchStamped,
    'lifecycle_msgs/msg/State': lifecycle_msgs.msg.State,
    'lifecycle_msgs/msg/Transition': lifecycle_msgs.msg.Transition,
    'lifecycle_msgs/msg/TransitionDescription': lifecycle_msgs.msg.TransitionDescription,
    'lifecycle_msgs/msg/TransitionEvent': lifecycle_msgs.msg.TransitionEvent,
    'lifecycle_msgs/srv/ChangeState_Request': lifecycle_msgs.srv.ChangeState_Request,
    'lifecycle_msgs/srv/ChangeState_Response': lifecycle_msgs.srv.ChangeState_Response,
    'lifecycle_msgs/srv/GetAvailableStates_Request': lifecycle_msgs.srv.GetAvailableStates_Request,
    'lifecycle_msgs/srv/GetAvailableStates_Response': lifecycle_msgs.srv.GetAvailableStates_Response,
    'lifecycle_msgs/srv/GetAvailableTransitions_Request': lifecycle_msgs.srv.GetAvailableTransitions_Request,
    'lifecycle_msgs/srv/GetAvailableTransitions_Response': lifecycle_msgs.srv.GetAvailableTransitions_Response,
    'lifecycle_msgs/srv/GetState_Request': lifecycle_msgs.srv.GetState_Request,
    'lifecycle_msgs/srv/GetState_Response': lifecycle_msgs.srv.GetState_Response,
    'logging_demo/srv/ConfigLogger_Request': logging_demo.srv.ConfigLogger_Request,
    'logging_demo/srv/ConfigLogger_Response': logging_demo.srv.ConfigLogger_Response,
    'map_msgs/msg/OccupancyGridUpdate': map_msgs.msg.OccupancyGridUpdate,
    'map_msgs/msg/PointCloud2Update': map_msgs.msg.PointCloud2Update,
    'map_msgs/msg/ProjectedMap': map_msgs.msg.ProjectedMap,
    'map_msgs/msg/ProjectedMapInfo': map_msgs.msg.ProjectedMapInfo,
    'map_msgs/srv/GetMapROI_Request': map_msgs.srv.GetMapROI_Request,
    'map_msgs/srv/GetMapROI_Response': map_msgs.srv.GetMapROI_Response,
    'map_msgs/srv/GetPointMapROI_Request': map_msgs.srv.GetPointMapROI_Request,
    'map_msgs/srv/GetPointMapROI_Response': map_msgs.srv.GetPointMapROI_Response,
    'map_msgs/srv/GetPointMap_Request': map_msgs.srv.GetPointMap_Request,
    'map_msgs/srv/GetPointMap_Response': map_msgs.srv.GetPointMap_Response,
    'map_msgs/srv/ProjectedMapsInfo_Request': map_msgs.srv.ProjectedMapsInfo_Request,
    'map_msgs/srv/ProjectedMapsInfo_Response': map_msgs.srv.ProjectedMapsInfo_Response,
    'map_msgs/srv/SaveMap_Request': map_msgs.srv.SaveMap_Request,
    'map_msgs/srv/SaveMap_Response': map_msgs.srv.SaveMap_Response,
    'map_msgs/srv/SetMapProjections_Request': map_msgs.srv.SetMapProjections_Request,
    'map_msgs/srv/SetMapProjections_Response': map_msgs.srv.SetMapProjections_Response,
    'nav_msgs/msg/GridCells': nav_msgs.msg.GridCells,
    'nav_msgs/msg/MapMetaData': nav_msgs.msg.MapMetaData,
    'nav_msgs/msg/OccupancyGrid': nav_msgs.msg.OccupancyGrid,
    'nav_msgs/msg/Odometry': nav_msgs.msg.Odometry,
    'nav_msgs/msg/Path': nav_msgs.msg.Path,
    'nav_msgs/srv/GetMap_Request': nav_msgs.srv.GetMap_Request,
    'nav_msgs/srv/GetMap_Response': nav_msgs.srv.GetMap_Response,
    'nav_msgs/srv/GetPlan_Request': nav_msgs.srv.GetPlan_Request,
    'nav_msgs/srv/GetPlan_Response': nav_msgs.srv.GetPlan_Response,
    'nav_msgs/srv/SetMap_Request': nav_msgs.srv.SetMap_Request,
    'nav_msgs/srv/SetMap_Response': nav_msgs.srv.SetMap_Response,
    'pcl_msgs/msg/ModelCoefficients': pcl_msgs.msg.ModelCoefficients,
    'pcl_msgs/msg/PointIndices': pcl_msgs.msg.PointIndices,
    'pcl_msgs/msg/PolygonMesh': pcl_msgs.msg.PolygonMesh,
    'pcl_msgs/msg/Vertices': pcl_msgs.msg.Vertices,
    'pcl_msgs/srv/UpdateFilename_Request': pcl_msgs.srv.UpdateFilename_Request,
    'pcl_msgs/srv/UpdateFilename_Response': pcl_msgs.srv.UpdateFilename_Response,
    'pendulum_msgs/msg/JointCommand': pendulum_msgs.msg.JointCommand,
    'pendulum_msgs/msg/JointState': pendulum_msgs.msg.JointState,
    'pendulum_msgs/msg/RttestResults': pendulum_msgs.msg.RttestResults,
    'rcl_interfaces/msg/FloatingPointRange': rcl_interfaces.msg.FloatingPointRange,
    'rcl_interfaces/msg/IntegerRange': rcl_interfaces.msg.IntegerRange,
    'rcl_interfaces/msg/IntraProcessMessage': rcl_interfaces.msg.IntraProcessMessage,
    'rcl_interfaces/msg/ListParametersResult': rcl_interfaces.msg.ListParametersResult,
    'rcl_interfaces/msg/Log': rcl_interfaces.msg.Log,
    'rcl_interfaces/msg/Parameter': rcl_interfaces.msg.Parameter,
    'rcl_interfaces/msg/ParameterDescriptor': rcl_interfaces.msg.ParameterDescriptor,
    'rcl_interfaces/msg/ParameterEvent': rcl_interfaces.msg.ParameterEvent,
    'rcl_interfaces/msg/ParameterEventDescriptors': rcl_interfaces.msg.ParameterEventDescriptors,
    'rcl_interfaces/msg/ParameterType': rcl_interfaces.msg.ParameterType,
    'rcl_interfaces/msg/ParameterValue': rcl_interfaces.msg.ParameterValue,
    'rcl_interfaces/msg/SetParametersResult': rcl_interfaces.msg.SetParametersResult,
    'rcl_interfaces/srv/DescribeParameters_Request': rcl_interfaces.srv.DescribeParameters_Request,
    'rcl_interfaces/srv/DescribeParameters_Response': rcl_interfaces.srv.DescribeParameters_Response,
    'rcl_interfaces/srv/GetParameterTypes_Request': rcl_interfaces.srv.GetParameterTypes_Request,
    'rcl_interfaces/srv/GetParameterTypes_Response': rcl_interfaces.srv.GetParameterTypes_Response,
    'rcl_interfaces/srv/GetParameters_Request': rcl_interfaces.srv.GetParameters_Request,
    'rcl_interfaces/srv/GetParameters_Response': rcl_interfaces.srv.GetParameters_Response,
    'rcl_interfaces/srv/ListParameters_Request': rcl_interfaces.srv.ListParameters_Request,
    'rcl_interfaces/srv/ListParameters_Response': rcl_interfaces.srv.ListParameters_Response,
    'rcl_interfaces/srv/SetParametersAtomically_Request': rcl_interfaces.srv.SetParametersAtomically_Request,
    'rcl_interfaces/srv/SetParametersAtomically_Response': rcl_interfaces.srv.SetParametersAtomically_Response,
    'rcl_interfaces/srv/SetParameters_Request': rcl_interfaces.srv.SetParameters_Request,
    'rcl_interfaces/srv/SetParameters_Response': rcl_interfaces.srv.SetParameters_Response,
    'rosgraph_msgs/msg/Clock': rosgraph_msgs.msg.Clock,
    'rqt_py_common/msg/ArrayVal': rqt_py_common.msg.ArrayVal,
    'rqt_py_common/msg/Val': rqt_py_common.msg.Val,
    'rqt_py_common/srv/AddTwoInts_Request': rqt_py_common.srv.AddTwoInts_Request,
    'rqt_py_common/srv/AddTwoInts_Response': rqt_py_common.srv.AddTwoInts_Response,
    'sensor_msgs/msg/BatteryState': sensor_msgs.msg.BatteryState,
    'sensor_msgs/msg/CameraInfo': sensor_msgs.msg.CameraInfo,
    'sensor_msgs/msg/ChannelFloat32': sensor_msgs.msg.ChannelFloat32,
    'sensor_msgs/msg/CompressedImage': sensor_msgs.msg.CompressedImage,
    'sensor_msgs/msg/FluidPressure': sensor_msgs.msg.FluidPressure,
    'sensor_msgs/msg/Illuminance': sensor_msgs.msg.Illuminance,
    'sensor_msgs/msg/Image': sensor_msgs.msg.Image,
    'sensor_msgs/msg/Imu': sensor_msgs.msg.Imu,
    'sensor_msgs/msg/JointState': sensor_msgs.msg.JointState,
    'sensor_msgs/msg/Joy': sensor_msgs.msg.Joy,
    'sensor_msgs/msg/JoyFeedback': sensor_msgs.msg.JoyFeedback,
    'sensor_msgs/msg/JoyFeedbackArray': sensor_msgs.msg.JoyFeedbackArray,
    'sensor_msgs/msg/LaserEcho': sensor_msgs.msg.LaserEcho,
    'sensor_msgs/msg/LaserScan': sensor_msgs.msg.LaserScan,
    'sensor_msgs/msg/MagneticField': sensor_msgs.msg.MagneticField,
    'sensor_msgs/msg/MultiDOFJointState': sensor_msgs.msg.MultiDOFJointState,
    'sensor_msgs/msg/MultiEchoLaserScan': sensor_msgs.msg.MultiEchoLaserScan,
    'sensor_msgs/msg/NavSatFix': sensor_msgs.msg.NavSatFix,
    'sensor_msgs/msg/NavSatStatus': sensor_msgs.msg.NavSatStatus,
    'sensor_msgs/msg/PointCloud': sensor_msgs.msg.PointCloud,
    'sensor_msgs/msg/PointCloud2': sensor_msgs.msg.PointCloud2,
    'sensor_msgs/msg/PointField': sensor_msgs.msg.PointField,
    'sensor_msgs/msg/Range': sensor_msgs.msg.Range,
    'sensor_msgs/msg/RegionOfInterest': sensor_msgs.msg.RegionOfInterest,
    'sensor_msgs/msg/RelativeHumidity': sensor_msgs.msg.RelativeHumidity,
    'sensor_msgs/msg/Temperature': sensor_msgs.msg.Temperature,
    'sensor_msgs/msg/TimeReference': sensor_msgs.msg.TimeReference,
    'sensor_msgs/srv/SetCameraInfo_Request': sensor_msgs.srv.SetCameraInfo_Request,
    'sensor_msgs/srv/SetCameraInfo_Response': sensor_msgs.srv.SetCameraInfo_Response,
    'shape_msgs/msg/Mesh': shape_msgs.msg.Mesh,
    'shape_msgs/msg/MeshTriangle': shape_msgs.msg.MeshTriangle,
    'shape_msgs/msg/Plane': shape_msgs.msg.Plane,
    'shape_msgs/msg/SolidPrimitive': shape_msgs.msg.SolidPrimitive,
    'std_msgs/msg/Bool': std_msgs.msg.Bool,
    'std_msgs/msg/Byte': std_msgs.msg.Byte,
    'std_msgs/msg/ByteMultiArray': std_msgs.msg.ByteMultiArray,
    'std_msgs/msg/Char': std_msgs.msg.Char,
    'std_msgs/msg/ColorRGBA': std_msgs.msg.ColorRGBA,
    'std_msgs/msg/Empty': std_msgs.msg.Empty,
    'std_msgs/msg/Float32': std_msgs.msg.Float32,
    'std_msgs/msg/Float32MultiArray': std_msgs.msg.Float32MultiArray,
    'std_msgs/msg/Float64': std_msgs.msg.Float64,
    'std_msgs/msg/Float64MultiArray': std_msgs.msg.Float64MultiArray,
    'std_msgs/msg/Header': std_msgs.msg.Header,
    'std_msgs/msg/Int16': std_msgs.msg.Int16,
    'std_msgs/msg/Int16MultiArray': std_msgs.msg.Int16MultiArray,
    'std_msgs/msg/Int32': std_msgs.msg.Int32,
    'std_msgs/msg/Int32MultiArray': std_msgs.msg.Int32MultiArray,
    'std_msgs/msg/Int64': std_msgs.msg.Int64,
    'std_msgs/msg/Int64MultiArray': std_msgs.msg.Int64MultiArray,
    'std_msgs/msg/Int8': std_msgs.msg.Int8,
    'std_msgs/msg/Int8MultiArray': std_msgs.msg.Int8MultiArray,
    'std_msgs/msg/MultiArrayDimension': std_msgs.msg.MultiArrayDimension,
    'std_msgs/msg/MultiArrayLayout': std_msgs.msg.MultiArrayLayout,
    'std_msgs/msg/String': std_msgs.msg.String,
    'std_msgs/msg/UInt16': std_msgs.msg.UInt16,
    'std_msgs/msg/UInt16MultiArray': std_msgs.msg.UInt16MultiArray,
    'std_msgs/msg/UInt32': std_msgs.msg.UInt32,
    'std_msgs/msg/UInt32MultiArray': std_msgs.msg.UInt32MultiArray,
    'std_msgs/msg/UInt64': std_msgs.msg.UInt64,
    'std_msgs/msg/UInt64MultiArray': std_msgs.msg.UInt64MultiArray,
    'std_msgs/msg/UInt8': std_msgs.msg.UInt8,
    'std_msgs/msg/UInt8MultiArray': std_msgs.msg.UInt8MultiArray,
    'std_srvs/srv/Empty_Request': std_srvs.srv.Empty_Request,
    'std_srvs/srv/Empty_Response': std_srvs.srv.Empty_Response,
    'std_srvs/srv/SetBool_Request': std_srvs.srv.SetBool_Request,
    'std_srvs/srv/SetBool_Response': std_srvs.srv.SetBool_Response,
    'std_srvs/srv/Trigger_Request': std_srvs.srv.Trigger_Request,
    'std_srvs/srv/Trigger_Response': std_srvs.srv.Trigger_Response,
    'stereo_msgs/msg/DisparityImage': stereo_msgs.msg.DisparityImage,
    'tf2_msgs/msg/TF2Error': tf2_msgs.msg.TF2Error,
    'tf2_msgs/msg/TFMessage': tf2_msgs.msg.TFMessage,
    'tf2_msgs/srv/FrameGraph_Request': tf2_msgs.srv.FrameGraph_Request,
    'tf2_msgs/srv/FrameGraph_Response': tf2_msgs.srv.FrameGraph_Response,
    'trajectory_msgs/msg/JointTrajectory': trajectory_msgs.msg.JointTrajectory,
    'trajectory_msgs/msg/JointTrajectoryPoint': trajectory_msgs.msg.JointTrajectoryPoint,
    'trajectory_msgs/msg/MultiDOFJointTrajectory': trajectory_msgs.msg.MultiDOFJointTrajectory,
    'trajectory_msgs/msg/MultiDOFJointTrajectoryPoint': trajectory_msgs.msg.MultiDOFJointTrajectoryPoint,
    'unique_identifier_msgs/msg/UUID': unique_identifier_msgs.msg.UUID,
    'visualization_msgs/msg/ImageMarker': visualization_msgs.msg.ImageMarker,
    'visualization_msgs/msg/InteractiveMarker': visualization_msgs.msg.InteractiveMarker,
    'visualization_msgs/msg/InteractiveMarkerControl': visualization_msgs.msg.InteractiveMarkerControl,
    'visualization_msgs/msg/InteractiveMarkerFeedback': visualization_msgs.msg.InteractiveMarkerFeedback,
    'visualization_msgs/msg/InteractiveMarkerInit': visualization_msgs.msg.InteractiveMarkerInit,
    'visualization_msgs/msg/InteractiveMarkerPose': visualization_msgs.msg.InteractiveMarkerPose,
    'visualization_msgs/msg/InteractiveMarkerUpdate': visualization_msgs.msg.InteractiveMarkerUpdate,
    'visualization_msgs/msg/Marker': visualization_msgs.msg.Marker,
    'visualization_msgs/msg/MarkerArray': visualization_msgs.msg.MarkerArray,
    'visualization_msgs/msg/MenuEntry': visualization_msgs.msg.MenuEntry,
    'visualization_msgs/srv/GetInteractiveMarkers_Request': visualization_msgs.srv.GetInteractiveMarkers_Request,
    'visualization_msgs/srv/GetInteractiveMarkers_Response': visualization_msgs.srv.GetInteractiveMarkers_Response,
  };
  type MessageTypeClassName = keyof MessagesMap;
  type Message = MessagesMap[MessageTypeClassName];
  type MessageType<T> = T extends MessageTypeClassName ? MessagesMap[T] : object;

  type MessageTypeClassWrappersMap = {
    'string': never,
    'action_msgs/msg/GoalInfo': action_msgs.msg.GoalInfo_WrapperType,
    'action_msgs/msg/GoalStatus': action_msgs.msg.GoalStatus_WrapperType,
    'action_msgs/msg/GoalStatusArray': action_msgs.msg.GoalStatusArray_WrapperType,
    'action_msgs/srv/CancelGoal_Request': action_msgs.srv.CancelGoal_Request_WrapperType,
    'action_msgs/srv/CancelGoal_Response': action_msgs.srv.CancelGoal_Response_WrapperType,
    'actionlib_msgs/msg/GoalID': actionlib_msgs.msg.GoalID_WrapperType,
    'actionlib_msgs/msg/GoalStatus': actionlib_msgs.msg.GoalStatus_WrapperType,
    'actionlib_msgs/msg/GoalStatusArray': actionlib_msgs.msg.GoalStatusArray_WrapperType,
    'builtin_interfaces/msg/Duration': builtin_interfaces.msg.Duration_WrapperType,
    'builtin_interfaces/msg/Time': builtin_interfaces.msg.Time_WrapperType,
    'composition_interfaces/srv/ListNodes_Request': composition_interfaces.srv.ListNodes_Request_WrapperType,
    'composition_interfaces/srv/ListNodes_Response': composition_interfaces.srv.ListNodes_Response_WrapperType,
    'composition_interfaces/srv/LoadNode_Request': composition_interfaces.srv.LoadNode_Request_WrapperType,
    'composition_interfaces/srv/LoadNode_Response': composition_interfaces.srv.LoadNode_Response_WrapperType,
    'composition_interfaces/srv/UnloadNode_Request': composition_interfaces.srv.UnloadNode_Request_WrapperType,
    'composition_interfaces/srv/UnloadNode_Response': composition_interfaces.srv.UnloadNode_Response_WrapperType,
    'diagnostic_msgs/msg/DiagnosticArray': diagnostic_msgs.msg.DiagnosticArray_WrapperType,
    'diagnostic_msgs/msg/DiagnosticStatus': diagnostic_msgs.msg.DiagnosticStatus_WrapperType,
    'diagnostic_msgs/msg/KeyValue': diagnostic_msgs.msg.KeyValue_WrapperType,
    'diagnostic_msgs/srv/AddDiagnostics_Request': diagnostic_msgs.srv.AddDiagnostics_Request_WrapperType,
    'diagnostic_msgs/srv/AddDiagnostics_Response': diagnostic_msgs.srv.AddDiagnostics_Response_WrapperType,
    'diagnostic_msgs/srv/SelfTest_Request': diagnostic_msgs.srv.SelfTest_Request_WrapperType,
    'diagnostic_msgs/srv/SelfTest_Response': diagnostic_msgs.srv.SelfTest_Response_WrapperType,
    'example_interfaces/srv/AddTwoInts_Request': example_interfaces.srv.AddTwoInts_Request_WrapperType,
    'example_interfaces/srv/AddTwoInts_Response': example_interfaces.srv.AddTwoInts_Response_WrapperType,
    'geometry_msgs/msg/Accel': geometry_msgs.msg.Accel_WrapperType,
    'geometry_msgs/msg/AccelStamped': geometry_msgs.msg.AccelStamped_WrapperType,
    'geometry_msgs/msg/AccelWithCovariance': geometry_msgs.msg.AccelWithCovariance_WrapperType,
    'geometry_msgs/msg/AccelWithCovarianceStamped': geometry_msgs.msg.AccelWithCovarianceStamped_WrapperType,
    'geometry_msgs/msg/Inertia': geometry_msgs.msg.Inertia_WrapperType,
    'geometry_msgs/msg/InertiaStamped': geometry_msgs.msg.InertiaStamped_WrapperType,
    'geometry_msgs/msg/Point': geometry_msgs.msg.Point_WrapperType,
    'geometry_msgs/msg/Point32': geometry_msgs.msg.Point32_WrapperType,
    'geometry_msgs/msg/PointStamped': geometry_msgs.msg.PointStamped_WrapperType,
    'geometry_msgs/msg/Polygon': geometry_msgs.msg.Polygon_WrapperType,
    'geometry_msgs/msg/PolygonStamped': geometry_msgs.msg.PolygonStamped_WrapperType,
    'geometry_msgs/msg/Pose': geometry_msgs.msg.Pose_WrapperType,
    'geometry_msgs/msg/Pose2D': geometry_msgs.msg.Pose2D_WrapperType,
    'geometry_msgs/msg/PoseArray': geometry_msgs.msg.PoseArray_WrapperType,
    'geometry_msgs/msg/PoseStamped': geometry_msgs.msg.PoseStamped_WrapperType,
    'geometry_msgs/msg/PoseWithCovariance': geometry_msgs.msg.PoseWithCovariance_WrapperType,
    'geometry_msgs/msg/PoseWithCovarianceStamped': geometry_msgs.msg.PoseWithCovarianceStamped_WrapperType,
    'geometry_msgs/msg/Quaternion': geometry_msgs.msg.Quaternion_WrapperType,
    'geometry_msgs/msg/QuaternionStamped': geometry_msgs.msg.QuaternionStamped_WrapperType,
    'geometry_msgs/msg/Transform': geometry_msgs.msg.Transform_WrapperType,
    'geometry_msgs/msg/TransformStamped': geometry_msgs.msg.TransformStamped_WrapperType,
    'geometry_msgs/msg/Twist': geometry_msgs.msg.Twist_WrapperType,
    'geometry_msgs/msg/TwistStamped': geometry_msgs.msg.TwistStamped_WrapperType,
    'geometry_msgs/msg/TwistWithCovariance': geometry_msgs.msg.TwistWithCovariance_WrapperType,
    'geometry_msgs/msg/TwistWithCovarianceStamped': geometry_msgs.msg.TwistWithCovarianceStamped_WrapperType,
    'geometry_msgs/msg/Vector3': geometry_msgs.msg.Vector3_WrapperType,
    'geometry_msgs/msg/Vector3Stamped': geometry_msgs.msg.Vector3Stamped_WrapperType,
    'geometry_msgs/msg/Wrench': geometry_msgs.msg.Wrench_WrapperType,
    'geometry_msgs/msg/WrenchStamped': geometry_msgs.msg.WrenchStamped_WrapperType,
    'lifecycle_msgs/msg/State': lifecycle_msgs.msg.State_WrapperType,
    'lifecycle_msgs/msg/Transition': lifecycle_msgs.msg.Transition_WrapperType,
    'lifecycle_msgs/msg/TransitionDescription': lifecycle_msgs.msg.TransitionDescription_WrapperType,
    'lifecycle_msgs/msg/TransitionEvent': lifecycle_msgs.msg.TransitionEvent_WrapperType,
    'lifecycle_msgs/srv/ChangeState_Request': lifecycle_msgs.srv.ChangeState_Request_WrapperType,
    'lifecycle_msgs/srv/ChangeState_Response': lifecycle_msgs.srv.ChangeState_Response_WrapperType,
    'lifecycle_msgs/srv/GetAvailableStates_Request': lifecycle_msgs.srv.GetAvailableStates_Request_WrapperType,
    'lifecycle_msgs/srv/GetAvailableStates_Response': lifecycle_msgs.srv.GetAvailableStates_Response_WrapperType,
    'lifecycle_msgs/srv/GetAvailableTransitions_Request': lifecycle_msgs.srv.GetAvailableTransitions_Request_WrapperType,
    'lifecycle_msgs/srv/GetAvailableTransitions_Response': lifecycle_msgs.srv.GetAvailableTransitions_Response_WrapperType,
    'lifecycle_msgs/srv/GetState_Request': lifecycle_msgs.srv.GetState_Request_WrapperType,
    'lifecycle_msgs/srv/GetState_Response': lifecycle_msgs.srv.GetState_Response_WrapperType,
    'logging_demo/srv/ConfigLogger_Request': logging_demo.srv.ConfigLogger_Request_WrapperType,
    'logging_demo/srv/ConfigLogger_Response': logging_demo.srv.ConfigLogger_Response_WrapperType,
    'map_msgs/msg/OccupancyGridUpdate': map_msgs.msg.OccupancyGridUpdate_WrapperType,
    'map_msgs/msg/PointCloud2Update': map_msgs.msg.PointCloud2Update_WrapperType,
    'map_msgs/msg/ProjectedMap': map_msgs.msg.ProjectedMap_WrapperType,
    'map_msgs/msg/ProjectedMapInfo': map_msgs.msg.ProjectedMapInfo_WrapperType,
    'map_msgs/srv/GetMapROI_Request': map_msgs.srv.GetMapROI_Request_WrapperType,
    'map_msgs/srv/GetMapROI_Response': map_msgs.srv.GetMapROI_Response_WrapperType,
    'map_msgs/srv/GetPointMapROI_Request': map_msgs.srv.GetPointMapROI_Request_WrapperType,
    'map_msgs/srv/GetPointMapROI_Response': map_msgs.srv.GetPointMapROI_Response_WrapperType,
    'map_msgs/srv/GetPointMap_Request': map_msgs.srv.GetPointMap_Request_WrapperType,
    'map_msgs/srv/GetPointMap_Response': map_msgs.srv.GetPointMap_Response_WrapperType,
    'map_msgs/srv/ProjectedMapsInfo_Request': map_msgs.srv.ProjectedMapsInfo_Request_WrapperType,
    'map_msgs/srv/ProjectedMapsInfo_Response': map_msgs.srv.ProjectedMapsInfo_Response_WrapperType,
    'map_msgs/srv/SaveMap_Request': map_msgs.srv.SaveMap_Request_WrapperType,
    'map_msgs/srv/SaveMap_Response': map_msgs.srv.SaveMap_Response_WrapperType,
    'map_msgs/srv/SetMapProjections_Request': map_msgs.srv.SetMapProjections_Request_WrapperType,
    'map_msgs/srv/SetMapProjections_Response': map_msgs.srv.SetMapProjections_Response_WrapperType,
    'nav_msgs/msg/GridCells': nav_msgs.msg.GridCells_WrapperType,
    'nav_msgs/msg/MapMetaData': nav_msgs.msg.MapMetaData_WrapperType,
    'nav_msgs/msg/OccupancyGrid': nav_msgs.msg.OccupancyGrid_WrapperType,
    'nav_msgs/msg/Odometry': nav_msgs.msg.Odometry_WrapperType,
    'nav_msgs/msg/Path': nav_msgs.msg.Path_WrapperType,
    'nav_msgs/srv/GetMap_Request': nav_msgs.srv.GetMap_Request_WrapperType,
    'nav_msgs/srv/GetMap_Response': nav_msgs.srv.GetMap_Response_WrapperType,
    'nav_msgs/srv/GetPlan_Request': nav_msgs.srv.GetPlan_Request_WrapperType,
    'nav_msgs/srv/GetPlan_Response': nav_msgs.srv.GetPlan_Response_WrapperType,
    'nav_msgs/srv/SetMap_Request': nav_msgs.srv.SetMap_Request_WrapperType,
    'nav_msgs/srv/SetMap_Response': nav_msgs.srv.SetMap_Response_WrapperType,
    'pcl_msgs/msg/ModelCoefficients': pcl_msgs.msg.ModelCoefficients_WrapperType,
    'pcl_msgs/msg/PointIndices': pcl_msgs.msg.PointIndices_WrapperType,
    'pcl_msgs/msg/PolygonMesh': pcl_msgs.msg.PolygonMesh_WrapperType,
    'pcl_msgs/msg/Vertices': pcl_msgs.msg.Vertices_WrapperType,
    'pcl_msgs/srv/UpdateFilename_Request': pcl_msgs.srv.UpdateFilename_Request_WrapperType,
    'pcl_msgs/srv/UpdateFilename_Response': pcl_msgs.srv.UpdateFilename_Response_WrapperType,
    'pendulum_msgs/msg/JointCommand': pendulum_msgs.msg.JointCommand_WrapperType,
    'pendulum_msgs/msg/JointState': pendulum_msgs.msg.JointState_WrapperType,
    'pendulum_msgs/msg/RttestResults': pendulum_msgs.msg.RttestResults_WrapperType,
    'rcl_interfaces/msg/FloatingPointRange': rcl_interfaces.msg.FloatingPointRange_WrapperType,
    'rcl_interfaces/msg/IntegerRange': rcl_interfaces.msg.IntegerRange_WrapperType,
    'rcl_interfaces/msg/IntraProcessMessage': rcl_interfaces.msg.IntraProcessMessage_WrapperType,
    'rcl_interfaces/msg/ListParametersResult': rcl_interfaces.msg.ListParametersResult_WrapperType,
    'rcl_interfaces/msg/Log': rcl_interfaces.msg.Log_WrapperType,
    'rcl_interfaces/msg/Parameter': rcl_interfaces.msg.Parameter_WrapperType,
    'rcl_interfaces/msg/ParameterDescriptor': rcl_interfaces.msg.ParameterDescriptor_WrapperType,
    'rcl_interfaces/msg/ParameterEvent': rcl_interfaces.msg.ParameterEvent_WrapperType,
    'rcl_interfaces/msg/ParameterEventDescriptors': rcl_interfaces.msg.ParameterEventDescriptors_WrapperType,
    'rcl_interfaces/msg/ParameterType': rcl_interfaces.msg.ParameterType_WrapperType,
    'rcl_interfaces/msg/ParameterValue': rcl_interfaces.msg.ParameterValue_WrapperType,
    'rcl_interfaces/msg/SetParametersResult': rcl_interfaces.msg.SetParametersResult_WrapperType,
    'rcl_interfaces/srv/DescribeParameters_Request': rcl_interfaces.srv.DescribeParameters_Request_WrapperType,
    'rcl_interfaces/srv/DescribeParameters_Response': rcl_interfaces.srv.DescribeParameters_Response_WrapperType,
    'rcl_interfaces/srv/GetParameterTypes_Request': rcl_interfaces.srv.GetParameterTypes_Request_WrapperType,
    'rcl_interfaces/srv/GetParameterTypes_Response': rcl_interfaces.srv.GetParameterTypes_Response_WrapperType,
    'rcl_interfaces/srv/GetParameters_Request': rcl_interfaces.srv.GetParameters_Request_WrapperType,
    'rcl_interfaces/srv/GetParameters_Response': rcl_interfaces.srv.GetParameters_Response_WrapperType,
    'rcl_interfaces/srv/ListParameters_Request': rcl_interfaces.srv.ListParameters_Request_WrapperType,
    'rcl_interfaces/srv/ListParameters_Response': rcl_interfaces.srv.ListParameters_Response_WrapperType,
    'rcl_interfaces/srv/SetParametersAtomically_Request': rcl_interfaces.srv.SetParametersAtomically_Request_WrapperType,
    'rcl_interfaces/srv/SetParametersAtomically_Response': rcl_interfaces.srv.SetParametersAtomically_Response_WrapperType,
    'rcl_interfaces/srv/SetParameters_Request': rcl_interfaces.srv.SetParameters_Request_WrapperType,
    'rcl_interfaces/srv/SetParameters_Response': rcl_interfaces.srv.SetParameters_Response_WrapperType,
    'rosgraph_msgs/msg/Clock': rosgraph_msgs.msg.Clock_WrapperType,
    'rqt_py_common/msg/ArrayVal': rqt_py_common.msg.ArrayVal_WrapperType,
    'rqt_py_common/msg/Val': rqt_py_common.msg.Val_WrapperType,
    'rqt_py_common/srv/AddTwoInts_Request': rqt_py_common.srv.AddTwoInts_Request_WrapperType,
    'rqt_py_common/srv/AddTwoInts_Response': rqt_py_common.srv.AddTwoInts_Response_WrapperType,
    'sensor_msgs/msg/BatteryState': sensor_msgs.msg.BatteryState_WrapperType,
    'sensor_msgs/msg/CameraInfo': sensor_msgs.msg.CameraInfo_WrapperType,
    'sensor_msgs/msg/ChannelFloat32': sensor_msgs.msg.ChannelFloat32_WrapperType,
    'sensor_msgs/msg/CompressedImage': sensor_msgs.msg.CompressedImage_WrapperType,
    'sensor_msgs/msg/FluidPressure': sensor_msgs.msg.FluidPressure_WrapperType,
    'sensor_msgs/msg/Illuminance': sensor_msgs.msg.Illuminance_WrapperType,
    'sensor_msgs/msg/Image': sensor_msgs.msg.Image_WrapperType,
    'sensor_msgs/msg/Imu': sensor_msgs.msg.Imu_WrapperType,
    'sensor_msgs/msg/JointState': sensor_msgs.msg.JointState_WrapperType,
    'sensor_msgs/msg/Joy': sensor_msgs.msg.Joy_WrapperType,
    'sensor_msgs/msg/JoyFeedback': sensor_msgs.msg.JoyFeedback_WrapperType,
    'sensor_msgs/msg/JoyFeedbackArray': sensor_msgs.msg.JoyFeedbackArray_WrapperType,
    'sensor_msgs/msg/LaserEcho': sensor_msgs.msg.LaserEcho_WrapperType,
    'sensor_msgs/msg/LaserScan': sensor_msgs.msg.LaserScan_WrapperType,
    'sensor_msgs/msg/MagneticField': sensor_msgs.msg.MagneticField_WrapperType,
    'sensor_msgs/msg/MultiDOFJointState': sensor_msgs.msg.MultiDOFJointState_WrapperType,
    'sensor_msgs/msg/MultiEchoLaserScan': sensor_msgs.msg.MultiEchoLaserScan_WrapperType,
    'sensor_msgs/msg/NavSatFix': sensor_msgs.msg.NavSatFix_WrapperType,
    'sensor_msgs/msg/NavSatStatus': sensor_msgs.msg.NavSatStatus_WrapperType,
    'sensor_msgs/msg/PointCloud': sensor_msgs.msg.PointCloud_WrapperType,
    'sensor_msgs/msg/PointCloud2': sensor_msgs.msg.PointCloud2_WrapperType,
    'sensor_msgs/msg/PointField': sensor_msgs.msg.PointField_WrapperType,
    'sensor_msgs/msg/Range': sensor_msgs.msg.Range_WrapperType,
    'sensor_msgs/msg/RegionOfInterest': sensor_msgs.msg.RegionOfInterest_WrapperType,
    'sensor_msgs/msg/RelativeHumidity': sensor_msgs.msg.RelativeHumidity_WrapperType,
    'sensor_msgs/msg/Temperature': sensor_msgs.msg.Temperature_WrapperType,
    'sensor_msgs/msg/TimeReference': sensor_msgs.msg.TimeReference_WrapperType,
    'sensor_msgs/srv/SetCameraInfo_Request': sensor_msgs.srv.SetCameraInfo_Request_WrapperType,
    'sensor_msgs/srv/SetCameraInfo_Response': sensor_msgs.srv.SetCameraInfo_Response_WrapperType,
    'shape_msgs/msg/Mesh': shape_msgs.msg.Mesh_WrapperType,
    'shape_msgs/msg/MeshTriangle': shape_msgs.msg.MeshTriangle_WrapperType,
    'shape_msgs/msg/Plane': shape_msgs.msg.Plane_WrapperType,
    'shape_msgs/msg/SolidPrimitive': shape_msgs.msg.SolidPrimitive_WrapperType,
    'std_msgs/msg/Bool': std_msgs.msg.Bool_WrapperType,
    'std_msgs/msg/Byte': std_msgs.msg.Byte_WrapperType,
    'std_msgs/msg/ByteMultiArray': std_msgs.msg.ByteMultiArray_WrapperType,
    'std_msgs/msg/Char': std_msgs.msg.Char_WrapperType,
    'std_msgs/msg/ColorRGBA': std_msgs.msg.ColorRGBA_WrapperType,
    'std_msgs/msg/Empty': std_msgs.msg.Empty_WrapperType,
    'std_msgs/msg/Float32': std_msgs.msg.Float32_WrapperType,
    'std_msgs/msg/Float32MultiArray': std_msgs.msg.Float32MultiArray_WrapperType,
    'std_msgs/msg/Float64': std_msgs.msg.Float64_WrapperType,
    'std_msgs/msg/Float64MultiArray': std_msgs.msg.Float64MultiArray_WrapperType,
    'std_msgs/msg/Header': std_msgs.msg.Header_WrapperType,
    'std_msgs/msg/Int16': std_msgs.msg.Int16_WrapperType,
    'std_msgs/msg/Int16MultiArray': std_msgs.msg.Int16MultiArray_WrapperType,
    'std_msgs/msg/Int32': std_msgs.msg.Int32_WrapperType,
    'std_msgs/msg/Int32MultiArray': std_msgs.msg.Int32MultiArray_WrapperType,
    'std_msgs/msg/Int64': std_msgs.msg.Int64_WrapperType,
    'std_msgs/msg/Int64MultiArray': std_msgs.msg.Int64MultiArray_WrapperType,
    'std_msgs/msg/Int8': std_msgs.msg.Int8_WrapperType,
    'std_msgs/msg/Int8MultiArray': std_msgs.msg.Int8MultiArray_WrapperType,
    'std_msgs/msg/MultiArrayDimension': std_msgs.msg.MultiArrayDimension_WrapperType,
    'std_msgs/msg/MultiArrayLayout': std_msgs.msg.MultiArrayLayout_WrapperType,
    'std_msgs/msg/String': std_msgs.msg.String_WrapperType,
    'std_msgs/msg/UInt16': std_msgs.msg.UInt16_WrapperType,
    'std_msgs/msg/UInt16MultiArray': std_msgs.msg.UInt16MultiArray_WrapperType,
    'std_msgs/msg/UInt32': std_msgs.msg.UInt32_WrapperType,
    'std_msgs/msg/UInt32MultiArray': std_msgs.msg.UInt32MultiArray_WrapperType,
    'std_msgs/msg/UInt64': std_msgs.msg.UInt64_WrapperType,
    'std_msgs/msg/UInt64MultiArray': std_msgs.msg.UInt64MultiArray_WrapperType,
    'std_msgs/msg/UInt8': std_msgs.msg.UInt8_WrapperType,
    'std_msgs/msg/UInt8MultiArray': std_msgs.msg.UInt8MultiArray_WrapperType,
    'std_srvs/srv/Empty_Request': std_srvs.srv.Empty_Request_WrapperType,
    'std_srvs/srv/Empty_Response': std_srvs.srv.Empty_Response_WrapperType,
    'std_srvs/srv/SetBool_Request': std_srvs.srv.SetBool_Request_WrapperType,
    'std_srvs/srv/SetBool_Response': std_srvs.srv.SetBool_Response_WrapperType,
    'std_srvs/srv/Trigger_Request': std_srvs.srv.Trigger_Request_WrapperType,
    'std_srvs/srv/Trigger_Response': std_srvs.srv.Trigger_Response_WrapperType,
    'stereo_msgs/msg/DisparityImage': stereo_msgs.msg.DisparityImage_WrapperType,
    'tf2_msgs/msg/TF2Error': tf2_msgs.msg.TF2Error_WrapperType,
    'tf2_msgs/msg/TFMessage': tf2_msgs.msg.TFMessage_WrapperType,
    'tf2_msgs/srv/FrameGraph_Request': tf2_msgs.srv.FrameGraph_Request_WrapperType,
    'tf2_msgs/srv/FrameGraph_Response': tf2_msgs.srv.FrameGraph_Response_WrapperType,
    'trajectory_msgs/msg/JointTrajectory': trajectory_msgs.msg.JointTrajectory_WrapperType,
    'trajectory_msgs/msg/JointTrajectoryPoint': trajectory_msgs.msg.JointTrajectoryPoint_WrapperType,
    'trajectory_msgs/msg/MultiDOFJointTrajectory': trajectory_msgs.msg.MultiDOFJointTrajectory_WrapperType,
    'trajectory_msgs/msg/MultiDOFJointTrajectoryPoint': trajectory_msgs.msg.MultiDOFJointTrajectoryPoint_WrapperType,
    'unique_identifier_msgs/msg/UUID': unique_identifier_msgs.msg.UUID_WrapperType,
    'visualization_msgs/msg/ImageMarker': visualization_msgs.msg.ImageMarker_WrapperType,
    'visualization_msgs/msg/InteractiveMarker': visualization_msgs.msg.InteractiveMarker_WrapperType,
    'visualization_msgs/msg/InteractiveMarkerControl': visualization_msgs.msg.InteractiveMarkerControl_WrapperType,
    'visualization_msgs/msg/InteractiveMarkerFeedback': visualization_msgs.msg.InteractiveMarkerFeedback_WrapperType,
    'visualization_msgs/msg/InteractiveMarkerInit': visualization_msgs.msg.InteractiveMarkerInit_WrapperType,
    'visualization_msgs/msg/InteractiveMarkerPose': visualization_msgs.msg.InteractiveMarkerPose_WrapperType,
    'visualization_msgs/msg/InteractiveMarkerUpdate': visualization_msgs.msg.InteractiveMarkerUpdate_WrapperType,
    'visualization_msgs/msg/Marker': visualization_msgs.msg.Marker_WrapperType,
    'visualization_msgs/msg/MarkerArray': visualization_msgs.msg.MarkerArray_WrapperType,
    'visualization_msgs/msg/MenuEntry': visualization_msgs.msg.MenuEntry_WrapperType,
    'visualization_msgs/srv/GetInteractiveMarkers_Request': visualization_msgs.srv.GetInteractiveMarkers_Request_WrapperType,
    'visualization_msgs/srv/GetInteractiveMarkers_Response': visualization_msgs.srv.GetInteractiveMarkers_Response_WrapperType,
  };
  type MessageWrapperType<T> = T extends MessageTypeClassName ? MessageTypeClassWrappersMap[T] : object;

  type ServiceTypeClassName = 
    'action_msgs/srv/CancelGoal' |
    'composition_interfaces/srv/ListNodes' |
    'composition_interfaces/srv/LoadNode' |
    'composition_interfaces/srv/UnloadNode' |
    'diagnostic_msgs/srv/AddDiagnostics' |
    'diagnostic_msgs/srv/SelfTest' |
    'example_interfaces/srv/AddTwoInts' |
    'lifecycle_msgs/srv/ChangeState' |
    'lifecycle_msgs/srv/GetAvailableStates' |
    'lifecycle_msgs/srv/GetAvailableTransitions' |
    'lifecycle_msgs/srv/GetState' |
    'logging_demo/srv/ConfigLogger' |
    'map_msgs/srv/GetMapROI' |
    'map_msgs/srv/GetPointMap' |
    'map_msgs/srv/GetPointMapROI' |
    'map_msgs/srv/ProjectedMapsInfo' |
    'map_msgs/srv/SaveMap' |
    'map_msgs/srv/SetMapProjections' |
    'nav_msgs/srv/GetMap' |
    'nav_msgs/srv/GetPlan' |
    'nav_msgs/srv/SetMap' |
    'pcl_msgs/srv/UpdateFilename' |
    'rcl_interfaces/srv/DescribeParameters' |
    'rcl_interfaces/srv/GetParameterTypes' |
    'rcl_interfaces/srv/GetParameters' |
    'rcl_interfaces/srv/ListParameters' |
    'rcl_interfaces/srv/SetParameters' |
    'rcl_interfaces/srv/SetParametersAtomically' |
    'rqt_py_common/srv/AddTwoInts' |
    'sensor_msgs/srv/SetCameraInfo' |
    'std_srvs/srv/Empty' |
    'std_srvs/srv/SetBool' |
    'std_srvs/srv/Trigger' |
    'tf2_msgs/srv/FrameGraph' |
    'visualization_msgs/srv/GetInteractiveMarkers';

  type TypeClassName = MessageTypeClassName | ServiceTypeClassName;
}
